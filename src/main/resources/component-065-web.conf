#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

sirius {
    frameworks {
        # Enables the built-in web server based on netty
        web.http = true
    }

    # Contains settings for all metrics exported by /system/metrics.
    metrics {
        # Contains the prefix to add to all metrics.
        # Note that this exporter uses the format es described by prometheus.io
        labelPrefix = "sirius_"

        # By default, the metrics page can only be accessed directly. All public requests,
        # which travel through a frontend proxy or load balancer are blocked.
        blockPublicAccess = true
    }
}

# Adding the web module to the list of known modules...
product {
    modules {
        sirius-web {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }

    # Contains the tag line show in the footer and login screen
    tagLine = "This Product is based on <a href=\"http://sirius-lib.net\">Sirius Lib</a> | <a href=\"/licenses\">Licenses</a>"

    # Determines if base URI of Tycho. Used for links to "home"...
    tychoRoot = "/"

    # Defines the root for legacy code (wondergem has been replaced by Tycho...)
    wondergemRoot = "/"

    # Determines if tycho history should be used (even for legacy wondergem templates)
    tychoHistory = true
}

# Contains the configuration for the web / http module
http {
    # Contains the port used for HTTP communication. The default value specified by HTTP is 80. We use 9000 since a
    # non root user cannot open a port below 1024
    port = 9000

    # May contain a list of additional ports which are also used for HTTP.
    # Provide ports as strings like "8080", "8081".
    additionalPorts = []

    # Can be used to force netty to bind only on the given address. This permits to run multiple servers on the same
    # port. If the value is empty, we bind all addresses.
    bindAddress = ""

    # Specifies the size until which an upload is kept entirely in memory
    uploadDiskThreshold = 1M

    # Specifies the min free size on disk. If the free space drops below this limit, the corresponding upload will
    # be canceled.
    minUploadFreespace = 100M

    # Maximal size of an upload which can be sent to the server
    maxUploadSize = 5G

    # Maximal tolerated time it takes to generate a response in millis. Everything that takes longer, will be logged.
    # Use 0 to disable.
    maxTimeToFirstByte = 2500

    # Maximal size of structured data (XML / JSON) which is accepted by the server. As this data is completely held
    # in memory, this value should not be too large.
    maxStructuredInputSize = 10M

    # Determines how long a channel can be idle before it is forcefully closed
    idleTimeout = 60 seconds

    # Determines the maximal number of requests to handle within a connection.
    # Note that proxies (listed in firewall.proxyIPs are unlimited).
    maxKeepalive = 25

    # Determines if a P3P fake header disabling all p3p checks in Internet Explorer (which is one of the last user
    # agents caring about that). A detailed description of P3P can be found here: http://en.wikipedia.org/wiki/P3P
    addP3PHeader = true

    # If a maintenance mode is enabled and locked, we send a 503 response for public services which declare that
    # the must not be called during maintenance (see PublicService.enforceMaintenanceMode). Along with the 503,
    # we send a 'Retry-After' header with the delay given in this config. This is done to signal that the given
    # downtime is of temporal nature and that clients might want to retry later. We choose a generous default here,
    # as this is most probably be used for patches which normally impose a shorter downtime. Therefore the retury
    # promised here will most probably be successful.
    maintenanceRetryAfter = 1 day

    # Determines the content security policy, i.e. which internet resources to load from which locations. By default,
    # an insecure "allow everything" policy is set. A more secure value could be "script-src 'self' 'unsafe-inline'", or
    # even "script-src 'self'". Inline code can be verified via hashing. When loading script files from external
    # servers, also add the base URLs into the list. A description of the general concept and guidelines are here:
    # - https://en.wikipedia.org/wiki/Content_Security_Policy
    # - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
    # - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src
    contentSecurityPolicy = ""

    # Determines if all cors requests (preflight requests especially) should be accepted by the server
    # automatically. If you need a more advanced behaviour, you probably want to implement a custom
    # dispatcher.
    corsAllowAll = true

    # Determines if POST requests should no longer be secured by enforcing valid CSRF tokens.
    # This should only be used (skipped) for testing (e.g. pen-testing) scenarios.
    skipCSRFTokens = false

    sessionCookie {
        # Specifies the name of the cookie which contains the client session
        name = "SIRIUS_SESSION"

        # Determines if sessions should be "pinned" to a client / user-agent by setting an additional
        # cookie which is stored outside of the session and referenced within it.
        # This is disabled by default as the "pin" could be misjudged as "tracking" id
        pinSession = false

        # Specifies the name of the cookie used to validate a corresponding client session cookie. Only used
        # when session pinning is activated using #pinSession
        pinName = "SIRIUS_PIN"

        # Specifies names of cookies that should be used as fallback for session pinning validation in case the
        # regular one #pinName is not valid.
        # Use case: The pinning cookie has by design a very long lifetime. In case of changed cookie settings, it won't
        # be updated with those new settings and so would have different settings than the short-live session cookie.
        # With settings (e.g. #sameSite) changed, client won't send both cookies together with would result in a
        # session pinning error invalidating the session.
        # How to use: Whenever changing cookie settings that will alter the client's sending behaviour, you should
        # change the #pinName and add the old name to #pinLegacyNames
        pinLegacyNames = ["SIRIUS_SESSION_PIN"]

        # Determines the lifetime of the client session cookie. If this is zero a "session" cookie is
        # created which will be deleted once the browser is closed.
        ttl = 90 days

        # Determines the SameSite attribute of the session cookie. Usually, Strict should be fine.
        # Possible values are: Lax, Strict, None (see: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05)
        sameSite = "Lax"

        # Determines whether the session cookie should be marked secure.
        # You probably want this, especially if you do not expect unsecure http connections without SSL.
        # Possible values are: ALWAYS_SECURE, NEVER, IF_SSL
        secure = "IF_SSL"
    }

    # Specifies the secret used to validate the consistency of client sessions. If no value is present (default)
    # a random secret is created on startup. However this implies that sessions do not work across clusters
    # or across server restart. Therefore its a good idea to provide a fixed secret here. The value should be
    # reasonable long and cryptographically computed - rather than your dogs name ;-)
    sessionSecret = ""

    # Specifies the lifetime of CSRF security tokens in a user session before being recomputed.
    # The token is guaranteed to be valid for at least this time since we store the last token after recomputing a new one.
    # For the same reason, the token can be valid for up to double this duration.
    csrfTokenLifetime = 12 hours

    # Should a default robots.txt be served?
    robots.txt.enabled = true

    # Accept search engines? (By default we don't allow any indexing, therefore disallow is true).
    robots.txt.disallow = true

    # Contains the name of the directory used to cache generated content like CSS files computed from SCSS files.
    # Will be created if it does not exist.
    generated-directory = "web-cache"

    # Configures the built-in firewall for the HTTP interface
    firewall {
        # A list of ip addresses or sub nets in CIDR notation can be named here, to limit the set of accepted IPs
        # If an address or a list of addresses is given, no IPs outside of this list will be accepted.
        # CIDR notation contains the IP, followed by the number of relevant bits, e.g.: 192.168.0.0/16
        # Separate multiple entries with a ",", e.g.: 192.168.192.1/32,192.168.168.0/24
        #
        # Note that these IPs are checked on a connection level. Therefore no X-Forwarded-For or the like will
        # be taken into consideration.
        filterIPs = ""

        # Contains one or more ip addresses of proxy servers. If a request from a proxy server is received, the
        # X-Forwarded-For header is used to determine the originating ip for the request. The notation used is the same
        # as for filterIPs.
        proxyIPs = ""
    }

    # Configures the OTPVerifier used to check two factor authentication tokens (as generated by apps like Google
    # Authenticator)
    otp {
        # Determines the number of intervals before and after the current one to still accept. This is used to
        # compensate clock drift
        graceNumberOfIntervals = 4

        # Determines the duration of one time interval. Google Authenticator and other popular apps use 30s
        timeInterval = 30s
    }

    # Configure SSL with SNI (Server Name Indication)...
    ssl {
        enabled = false
        port = 9443
        keystore = "Path to .jks file"
        password = "Password for keystore"
        alias = "Alias for the default domain"

        # Set to true to enable a Strict Transport Security will will force browsers to
        # use HTTPS when talking to the system...
        forceHSTS = false

        # Specifies the max-age value sent in teh HSTS header if enabled.
        # The value is given in seconds.
        hstsMaxAge = 31536000

        # Set strong DH parameters (1024 is the default used by JSSE)
        ephemeralDHKeySize = 2048

        # Only enable TLS protocols as SSLv3 is insecure (POODLE)
        protocols = [ "TLSv1", "TLSv1.1", "TLSv1.2" ]

        # The cipher selection of Java 8 seems quite reasonable
        # so we don't need to overwrite this
        ciphers = [ ]
    }

    # Lists all public APIs of the system.
    api {
        default {
            # Specifies the sort order for the API explorer.
            priority = 100

            # Provides the visible label of the API.
            label = ""

            # Provides a short and concise description of the API.
            description = ""

            # Determines if the API is deprecated or if it is sill active and recommended to be used.
            deprecated = false

            # Points to the detailed documentation of the API. This could be e.g. a reference to a Tycho knowledge base
            # article.
            documentationUri = ""

            # Specifies the role(s) which are required to view the documentation of this API.
            requiredRoles = ""
        }

        # Lists the health services as provided by the platform.
        health {
            priority = 900
            label = "System Health"
            description = "Provides services to query and monitor the health of the system."
            requiredRoles = "permission-system-health-api"
        }
    }

    response {
        # Contains the default client cache duration.
        defaultClientCacheTTL = 1h

        # Contains the default cache duration for static assets.
        defaultStaticAssetTTL = 6h

        # Contains the default value for the x-custom-ttl HTTP header.
        # This header can be used by custom reverse proxy servers when the default cache control is not sufficient.
        # The value will be given as string, so proxies such as varnish can use this value without conversion.
        defaultCustomProxyTTL = 30d
    }
}

# Configures the help system
help {
    # Determines which index page will be used
    indexTemplate = index

    # Contains the languages supported by the help-system
    languages = ["de", "en"]
}

# Configures the system health monitoring
# Most of these values are "best guesses" and might have to be fine tuned for particular applications
health {

    # For cluster health checks (especially used to compute the state shown in /system/monitor), we
    # use a circular buffer which keeps a history of the last N system states (one record per minute).
    # This value determine the size of the buffer.
    monitoring-intervals = 6

    # Determines how many intervals of the circular buffer have to be RED to consider the system
    # as "unstable" and therefore toggle an alarm (Cluster.isAlarmPresent). Not that independently of the
    # number, the current state also has to be RED in order to report an alarm. Therefore, if a system
    # recovers, it will be immediately considered healthy.
    #
    # Tweak these numbers if a metric tends to flap between RED/GREEN to provide some averaging. By default
    # these numbers are quite aggressive and might report false positives from time to time.
    critical-intervals = 3

    limits {

        # Number of HTTP requests per minute
        http-requests.gray = 100
        http-requests.warning = 0
        http-requests.error = 0

        # Number of slow HTTP requests per minute.
        # These are requests which need longer than 'maxTimeToFirstByte' to deliver the first byte of the response.
        http-slow-requests.gray = 1
        http-slow-requests.warning = 100
        http-slow-requests.error = 0

        # Number of blocked requests (by the firewall) per minute
        http-blocks.gray = 1
        http-blocks.warning = 15
        http-blocks.error = 0

        # Number of killed requests due to idle state (per minute)
        http-timeouts.gray = 1
        http-timeouts.warning = 15
        http-timeouts.error = 0

        # Number of HTTP 4xx status codes replied per minute
        http-client-errors.gray = 10
        http-client-errors.warning = 250
        http-client-errors.error = 0

        # Number of HTTP 5xx status codes replied per minute
        http-server-errors.gray = 1
        http-server-errors.warning = 15
        http-server-errors.error = 0

        # Number of currently open connections
        http-open-connections.gray = 2
        http-open-connections.warning = 0
        http-open-connections.error = 0

        # Average response time in milliseconds
        http-response-time.gray = 250
        http-response-time.warning = 1000
        http-response-time.error = 0


        # Average queue time for requests in milliseconds
        http-response-queue.gray = 1
        http-response-queue.warning = 10
        http-response-queue.error = 250

        # Average time to first byte in milliseconds
        http-response-ttfb.gray = 250
        http-response-ttfb.warning = 500
        http-response-ttfb.error = 1000

        # Incoming HTTP bandwidth
        http-bytes-in.gray = 500
        http-bytes-in.warning = 0
        http-bytes-in.error = 0

        # Outgoing HTTP bandwidth
        http-bytes-out.gray = 500
        http-bytes-out.warning = 0
        http-bytes-out.error = 0

        # Outgoing Contention Blocks
        http-contention-blocks.gray = 0
        http-contention-blocks.warning = 0
        http-contention-blocks.error = 0

        # HTTP Connections opened
        http-connects.gray = 100
        http-connects.warning = 0
        http-connects.error = 0

        # Heap memory allocated by netty (in MB)
        pooled-byte-buffer-used-heap-mem.gray = 64
        pooled-byte-buffer-used-heap-mem.warning = 0
        pooled-byte-buffer-used-heap-mem.error = 0

        # Direct memory allocated by netty (in MB)
        pooled-byte-buffer-used-direct-mem.gray = 64
        pooled-byte-buffer-used-direct-mem.warning = 0
        pooled-byte-buffer-used-direct-mem.error = 0

        # Open HTTP Websockets
        http-websockets.gray = 1
        http-websockets.warning = 0
        http-websockets.error = 0

        # Number of eMails being sent per minute
        mails-out.gray = 0
        mails-out.warning = 50
        mails-out.error = 0

        # Duration it takes to send a mail in millis
        mails-duration.gray = 500
        mails-duration.warning = 1000
        mails-duration.error = 15000
    }

}

# Contains settings used by the content generator (sirius.web.templates.Generator).
content {
    localResourcePath = "data/resources"
}

# Defines rules for the Sandbox of Noodle. Only methods named here can be invoked, unless they are marked with
# false, which effectively blacklists them. Note that if a method wears @NoodleAccessible as annotation, it may also
# be called by user code (if the access is marked as granted).
scripting {
    sandbox {
        # The security sandbox is disabled by default for performance reasons. Also, no SandboxDetector is available
        # anyway.
        mode = DISABLED

        # Provides a set of default rules for Java and Sirius classes.
        rules {
            "java.lang.String.*" = true
            "java.lang.Object.*" = true
            "java.lang.Enum.*" = true
            "java.lang.Class.getSimpleName" = true
            "java.lang.Throwable.getLocalizedMessage" = true
            "java.time.LocalDate.*" = true
            "java.time.LocalDateTime.*" = true
            "java.util.List.*" = true
            "java.util.Collection.*" = true
            "java.util.Collections.emptyList" = true
            "java.util.Optional.*" = true
            "java.util.Map.*" = true
            "java.util.Set.*" = true
            "java.util.stream.Stream.*" = true
            "sirius.kernel.commons.MultiMap.get" = true
            "sirius.kernel.commons.MultiMap.unmodifiableKeySet" = true
            "sirius.kernel.commons.MultiMap.values" = true
            "sirius.kernel.commons.Tuple.*" = true
            "sirius.kernel.commons.Tuple.setFirst" = false
            "sirius.kernel.commons.Tuple.setSecond" = false
            "sirius.kernel.commons.Value.*" = true
            "sirius.kernel.commons.Amount.*" = true
            "sirius.kernel.commons.Strings.*" = true
            "sirius.kernel.commons.StringCleanup.*" = true
            "sirius.kernel.settings.ExtendedSettings.getExtension" = true
            "sirius.kernel.settings.Settings.get" = true
            "sirius.kernel.settings.Settings.getSettings" = true
            "sirius.kernel.settings.Settings.getString" = true
            "sirius.kernel.settings.Settings.getStringList" = true
            "sirius.kernel.settings.Settings.getTranslatedString" = true
            "sirius.kernel.Sirius.isProd" = true
            "sirius.kernel.async.CallContext.getCurrent" = true
            "sirius.kernel.async.CallContext.get" = true
            "sirius.kernel.async.CallContext.getLanguage" = true
            "sirius.kernel.async.CallContext.getFallbackLanguage" = true
            "sirius.kernel.di.std.Named.getName" = true
            "sirius.kernel.di.transformers.Composable.as" = true
            "sirius.kernel.di.transformers.Composable.is" = true
            "sirius.kernel.di.transformers.Composable.tryAs" = true
            "sirius.kernel.nls.NLS.getCurrentLanguage" = true
            "sirius.kernel.nls.NLS.getDefaultLanguage" = true
            "sirius.kernel.nls.NLS.getFallbackLanguage" = true
            "sirius.kernel.nls.NLS.getSystemLanguage" = true
            "sirius.kernel.nls.NLS.get" = true
            "sirius.kernel.nls.NLS.getIfExists" = true
            "sirius.kernel.nls.NLS.safeGet" = true
            "sirius.kernel.nls.NLS.smartGet" = true
            "sirius.kernel.nls.NLS.fmtr" = true
            "sirius.kernel.nls.NLS.getDayOfWeek" = true
            "sirius.kernel.nls.NLS.getDayOfWeekShort" = true
            "sirius.kernel.nls.NLS.getMonthName" = true
            "sirius.kernel.nls.NLS.getMonthNameShort" = true
            "sirius.kernel.nls.NLS.toMachineString" = true
            "sirius.kernel.nls.NLS.toUserString" = true
            "sirius.kernel.nls.NLS.toSpokenDate" = true
            "sirius.kernel.nls.NLS.formatSpokenDate" = true
            "sirius.kernel.nls.NLS.parseMachineString" = true
            "sirius.kernel.nls.NLS.parseUserString" = true
            "sirius.kernel.nls.NLS.convertDuration" = true
            "sirius.kernel.nls.NLS.smartRound" = true
            "sirius.kernel.nls.NLS.formatSize" = true
            "sirius.kernel.nls.Formatter.set" = true
            "sirius.kernel.nls.Formatter.setDirect" = true
            "sirius.kernel.nls.Formatter.setDirectUnencoded" = true
            "sirius.kernel.nls.Formatter.ignoreMissingParameters" = true
            "sirius.kernel.nls.Formatter.format" = true
            "sirius.kernel.nls.Formatter.smartFormat" = true
        }
    }
}

assets {
    # Can be used to extend known scss files with custom content.
    # This is mainly used by libraries to include additional scss (e.g. sirius-biz). For tycho, the primary way of
    # providing custom scss is to overwrite the "/assets/tycho/styles/custom.scss".
    scss {
        # Example: to extend the tycho.scss:
        # tycho {
        #   path: "/assets/scss/my-extension.scss"
        # }
    }
}

tagliatelle {
    # Provides names for tag prefixes to be rendered in /system/tags..
    taglib {
        t = "Tycho"
        mail = "Mails"

        # Note that these are legacy taglibs...
        h = "Help"
        w = "Wondergem"
    }
}

cache {
    # Cache used to store resolved URLs by the Content class
    resolver-cache {
        maxSize = 8192
        ttl = 1 minute
    }

    # Caches compiled templates for tagliatelle
    tagliatelle-templates {
        maxSize = 1024
        ttl = 1 hour
    }

    # Caches user messages across redirects or JSON calls to display them later
    user-messages {
        maxSize = 2048
        ttl = 2 minute
    }
}

# Contains the mail configuration used to send and receive mails
mail {
    # Used as X-MAILER header...
    mailer = "SIRIUS Java Library"

    # Configuration used to send mails. You should at least change host, sender and senderName!
    # As long as host is empty, no mail will be sent (not even tried)...
    smtp {

        # Host of the SMTP server
        host = ""

        # Port used by the SMTP server
        port = "25"

        # Protocol and encryption of the SMTP connection (SMTP, SMTPS or STARTTLS)
        protocol = "SMTP"

        # Username used to authenticate at the SMTP server
        user = ""

        # Password used to authenticate at the SMTP server
        password = ""

        # Default address used as "From:" if no other address is given
        sender = ""

        # Default name of the "From:" if no name is given
        senderName = ""

        # Determines if sender: / from: and envelope-from: headers are used.
        useEnvelopeFrom = true

        # Contains a whitespace separated list of servers (domain names), whose SSL certificates can be trusted. When set,
        # CA signatures are apparently ignored, and only the listed servers are trusted! Set to "*" to trust any server.
        trustedServers = ""

        # Contains the settings required to enable DKIM
        dkim {

            # Contains the path to the DER encoded file containing the private key.
            # A key can be created using:
            # openssl genrsa -out dkim.pem 1024 (Generate keypair as PEM)
            # openssl pkcs8 -topk8 -nocrypt -in dkim.pem -outform der -out dkim.der (Save private key as DER)
            # openssl rsa -in dkim.pem -pubout (Save public key)
            keyFile = ""

            # Contains a list of domains to sign
            domains = []

            # Contains the DKIM selector used to sign (which is also used for the DNS lookup)
            selector = ""
        }
    }

}

async.executor {

    # Determines the size of the email sender pool. We only send one mail at a time
    # but with an unlimited queue length
    email {
        poolSize = 1
        queueLength = 0
    }

    # Determines the pool used by the web-server to handle incoming requests.
    webserver {
        poolSize = 64
        queueLength = 256
    }

    # Determines the pool used by the web-server to handle incoming websocket messages.
    websockets {
        poolSize = 16
        queueLength = 1024
    }
}

# Defines the user management used by the application
security {

    # Declares which scope types are known to the system and which user manager they use. Multiple scopes can be
    # defined i.e. to differentiate between a user logged into an administration area vs. a user logged into the
    # frontend of the application. To control which scope is active, the interface ScopeDetector has to be
    # implemented and registered using @Register. By default the scope "default" is used for all requests.
    # Implement ScopeDetector to change this.
    scopes {

        # Defines the manager used by the default scope.
        default {

            # Determines which user manager to use. By default the "public" user manager is used, which grants
            # all permissions (well, those given in defaultRoles) without requiring a login. Use "config" to switch
            # to users defined in the system configuration or create your own by implementing UserManagerFactory and
            # UserManager.
            # manager = "public"

            # Defines roles granted to anonymous.
            publicRoles = ["permission-system-state", "permission-system-api"]

            # Defines roles granted to all "users".
            defaultRoles = ["permission-system-state", "permission-system-api"]

            # Defines the default system language of this scope.
            default-language = "de"

            # Defines the fallback system language of this scope.
            fallback-language = "en"

            # Defines the list of languages known to the system. These can for example be used to validate languages
            # for data visible in multiple scopes. Language configurations of this and other scopes always use a subset
            # of this list.
            known-languages = ["de", "en", "fr", "nl", "it", "es", "pt", "pl", "cs", "hu", "da", "sv", "fi", "ro", "ru", "sk", "bg", "hr", "no", "sr", "sl", "uk", "lt", "lv"]

            # Defines a list of languages, for which translation texts are available in this scope. This should be
            # a subset of known-languages.
            display-languages = ["de", "en", "fr", "nl", "it", "es", "pt", "pl", "cs", "hu", "da", "sv", "fi", "ro", "ru", "sk", "bg", "hr", "no", "sr", "sl", "uk", "lt", "lv"]
        }
    }

    # Defines a list of all known permissions for reporting reasons
    permissions {
        flag-logged-in : "Determines if an authorized user is present"
        permission-system-console : "Required to use the console"
        permission-system-timing : "Required to use the Microtiming UI"
        permission-system-api : "Required to view public APIs provided by the system"
        permission-system-health-api : "Required to view the documentation of the health API"
        permission-system-state : "Required to view the system state"
        permission-system-load : "Required to view the system load"
        permission-system-tags : "Required to view all known Tagliatelle Tags"
        permission-system-tags-state : "Required to view the state of Tagliatelle"
        permission-babelfish : "Required to view and export loaded translations"
        permission-view-scope-default-config : "Required to view the default config of scopes"
    }

    # Declares profiles. Profiles are meta permissions which represent a set of permissions. Once a user is
    # authorized, its permissions which reference profiles will be expanded automatically. This can be used to declare
    # permissions like "admin" which represent a multitude of permissions (which also might change over time).
    #
    # Profiles are applied in order (sorted by their priority). You will need to order the profiles in a way, that
    # profiles referring to other profiles are applied before the profiles they refer to. You will be warned on the
    # first usage of profiles if the priorities are invalid. See ProfileSpec.groovy for examples.
    #
    # Note that the name can be a complex expression string like "permission1+!permission2,permission3".
    # WARNING: When the name is a complex expression you will NOT be warned about wrong priorities in the profiles!
    # You need to check the priorities in these cases yourself!
    profiles {
    #    template {
    #        priority : 100
    #        condition : "!some-permission"
    #        "permission1" : true,
    #        "permission2" : false
    #    }
    }

}

# Contains rewrites applied to the values within @Routed. This can be used to resolve
# routing conflicts with legacy controllers
controller.rewrites {
    default {}

    # Example:
    # state {
    #    # Names the controller which route is to be re-written
    #    controller = "SystemController"
    #
    #    # Names the route (uri) to re-write
    #    uri = "/system/state"
    #
    #    # Names the new (effective) route to use
    #    rewrite = "/system/status"
    # }
}
