#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

sirius.frameworks {
    # Enables the built-in web server based on netty
    web.http = true

    # Enables the crunchlog to write various statistics for later processing
    web.crunchlog = true
}

# Adding the web module to the list of known modules...
product {
    modules {
        sirius-web {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }

    # Contains the tag line show in the footer and login screen
    tagLine = "This Product is based on <a href=\"http://sirius-lib.net\">Sirius Lib</a>"

    # Determines if base URI of wondergem. Used for links to "home"...
    wondergemRoot = "/"
}

# Contains the configuration for the web / http module
http {
    # Contains the port used for HTTP communication. The default value specified by HTTP is 80. We use 9000 since a
    # non root user cannot open a port below 1024
    port = 9000

    # May contain a list of additional ports which are also used for HTTP.
    # Provide ports as strings like "8080", "8081".
    additionalPorts = []

    # Can be used to force netty to bind only on the given address. This permits to run multiple servers on the same
    # port. If the value is empty, we bind all addresses.
    bindAddress = ""

    # Specifies the size until which an upload is kept entirely in memory
    uploadDiskThreshold = 1M

    # Specifies the min free size on disk. If the free space drops below this limit, the corresponding upload will
    # be canceled.
    minUploadFreespace = 100M

    # Maximal size of an upload which can be sent to the server
    maxUploadSize = 5G

    # Maximal size of structured data (XML / JSON) which is accepted by the server. As this data is completely held
    # in memory, this value should not be too large.
    maxStructuredInputSize = 10M

    # Determines how long a channel can be idle before it is forcefully closed
    idleTimeout = 60 seconds

    # Specifies the context / path prefix. Setting a value here, makes the app behave like it would be running in a
    # sub directory.
    contextPrefix = ""

    # Determines if a P3P fake header disabling all p3p checks in Internet Explorer (which is one of the last user
    # agents caring about that). A detailed description of P3P can be found here: http://en.wikipedia.org/wiki/P3P
    addP3PHeader = true

    # Determines if all cors requests (preflight requests especially) should be accepted by the server
    # automatically. If you need a more advanced behaviour, you probably want to implement a custom
    # dispatcher.
    corsAllowAll = true

    # Specifies the name of the cookie which contains the client session
    sessionCookieName = "SIRIUS_SESSION"

    # Determines the livetime of the client session cookie. If this is zero a "session" cookie is
    # created which will be deleted once the browser is closed.
    sessionCookieTTL = 90 days

    # Specifies the secret used to validate the consistency of client sessions. If no value is present (default)
    # a random secret is created on startup. However this implies that sessions do not work across clusters
    # or across server restart. Therefore its a good idea to provide a fixed secret here. The value should be
    # reasonable long and cryptographically computed - rather than your dogs name ;-)
    sessionSecret = ""

    # Specifies the lifetime of short server sessions which where just created but not re-accessed yet. Using a shorter
    # timeout here permits to get rid of sessions accidentally started by bots. The term lifetime might be a bit
    # misleading as this value actually specifies the maximal idle time until a session is eligible for invalidation.
    serverMiniSessionLifetime = 30 seconds

    # Specifies the lifetime of server sessions. The term lifetime might be a bit misleading as this value actually
    # specifies the maximal idle time until a session is eligible for invalidation.
    serverSessionLifetime = 30 minutes

    # Specifies the lifetime of server sessions which have a authenticated user attached (somebody logged in).
    # The term lifetime might be a bit misleading as this value actually specifies the maximal idle time until a
    # session is eligible for invalidation.
    serverUserSessionLifetime = 2 hours

    # Specifies the parameter name which is used to transfer the id of the server session
    serverSessionParameterName = "JSESSIONID"

    # Specifies the cookie name which is used to transfer the id of the server session
    serverSessionCookieName = "JSESSIONID"

    # Determines which storage engine is used to store server sided sessions
    sessionStorage = "memory"

    # Should a default crossdomain.xml be served?
    crossdomain.xml.enabled = true

    # Should a default robots.txt be served?
    robots.txt.enabled = true

    # Accept search engines? (By default we don't allow any indexing, therefore disallow is true).
    robots.txt.disallow = true

    # Contains the name of the directory used to cache generated content like CSS files computed from SCSS files.
    # Will be created if it does not exist.
    generated-directory = "web-cache"

    # Configures the built-in firewall for the HTTP interface
    firewall {
        # A list of ip addresses or sub nets in CIDR notation can be named here, to limit the set of accepted IPs
        # If an address or a list of addresses is given, no IPs outside of this list will be accepted.
        # CIDR notation contains the IP, followed by the number of relevant bits, e.g.: 192.168.0.0/16
        # Separate multiple entries with a ",", e.g.: 192.168.192.1/32,192.168.168.0/24
        #
        # Note that these IPs are checked on a connection level. Therefore no X-Forwarded-For or the like will
        # be taken into consideration.
        filterIPs = ""

        # Contains a list of ip addresses or sub nets which are "trusted" by the system. The notation used is the
        # same as for filterIPs.
        #
        # When using a proxy or load balancer, make sure it adds a X-Forwarded-For header. Once this header is
        # present and the ip if the proxy server is listed in "proxyIPs", the given IP is checked instead of
        # the one of the proxy.
        trustedIPs = ""

        # Contains one or more ip addresses of proxy servers. If a request from a proxy server is received, the
        # X-Forwarded-For header is used to determine the originating ip for the request. The notation used is the same
        # as for filterIPs.
        proxyIPs = ""
    }

    # Configures the OTPVerifier used to check two factor authentication tokens (as generated by apps like Google
    # Authenticator)
    otp {
        # Determines the number of intervals before and after the current one to still accept. This is used to
        # compensate clock drift
        graceNumberOfIntervals = 4

        # Determines the duration of one time interval. Google Authenticator and other popular apps use 30s
        timeInterval = 30s
    }

    # Configure SSL with SNI (Server Name Indication)...
    ssl {
        enabled = false
        port = 9443
        keystore = "Path to .jks file"
        password = "Password for keystore"
        alias = "Alias for the default domain"

        # Set to true to enable a Strict Transport Security will will force browsers to
        # use HTTPS when talking to the system...
        forceHSTS = false

        # Specifies the max-age value sent in teh HSTS header if enabled.
        # The value is given in seconds.
        hstsMaxAge = 31536000

        # Set strong DH parameters (1024 is the default used by JSSE)
        ephemeralDHKeySize = 2048

        # Only enable TLS protocols as SSLv3 is insecure (POODLE)
        protocols = [ "TLSv1", "TLSv1.1", "TLSv1.2" ]

        # The cipher selection of Java 8 seems quite reasonable
        # so we don't need to overwrite this
        ciphers = [ ]
    }

}

# Configures the help system
help {
    # Determines which index page will be used
    indexTemplate = index
}

# Configures the system health monitoring
# Most of these values are "best guesses" and might have to be fine tuned for particular applications
health {

    limits {

        # Number of HTTP requests per minute
        http-requests.gray = 100
        http-requests.warning = 0
        http-requests.error = 0

        # Number of blocked requests (by the firewall) per minute
        http-blocks.gray = 1
        http-blocks.warning = 15
        http-blocks.error = 0

        # Number of killed requests due to idle state (per minute)
        http-timeouts.gray = 1
        http-timeouts.warning = 15
        http-timeouts.error = 0

        # Number of HTTP 4xx status codes replied per minute
        http-client-errors.gray = 10
        http-client-errors.warning = 250
        http-client-errors.error = 0

        # Number of HTTP 5xx status codes replied per minute
        http-server-errors.gray = 1
        http-server-errors.warning = 15
        http-server-errors.error = 0

        # Number of currently open connections
        http-open-connections.gray = 2
        http-open-connections.warning = 0
        http-open-connections.error = 0

        # Average response time in milliseconds
        http-response-time.gray = 250
        http-response-time.warning = 500
        http-response-time.error = 2000

        # Number of server sided sessions currently open
        http-sessions.gray = 100
        http-sessions.warning = 0
        http-sessions.error = 0

        # Incoming HTTP bandwidth
        http-bytes-in.gray = 500
        http-bytes-in.warning = 0
        http-bytes-in.error = 0

        # Outgoing HTTP bandwidth
        http-bytes-out.gray = 500
        http-bytes-out.warning = 0
        http-bytes-out.error = 0

        # HTTP Connections opened
        http-connects.gray = 100
        http-connects.warning = 0
        http-connects.error = 0

        # Number of eMails being sent per minute
        mails-out.gray = 0
        mails-out.warning = 50
        mails-out.error = 0

        # Duration it takes to send a mail in millis
        mails-duration.gray = 500
        mails-duration.warning = 1000
        mails-duration.error = 15000

        # Number of records being processed by the Crunchlog
        crunchlog-records.gray = 1
        crunchlog-records.warning = 2048
        crunchlog-records.error = 0

        # If the crunchlog is unable to write records to this,
        # this metric is flipped to one, to turn the system state to red
        crunchlog-error.gray = 0
        crunchlog-error.warning = 0
        crunchlog-error.error = 1
    }

    # Contains a list of monitored cluster nodes. The same list can (should) be supplied on all nodes so that
    # each node monitors all others. Based on the priority (lowest wins) at least one node will try to
    # alert an administrator if the cluster starts to fail.
    cluster {

        # Determines the node priority. The node which has the lowest priority (and is not failing) has to
        # notify the administrator.
        priority = 100

        # Contains a list of endpoints (http://url:port) which should be monitored
        nodes = [ ]

        # Types of alerts triggered, once the system is unhappy
        alerts {
            # Enter a server here in the form of: http://server:port - This will be used to
            # relay the alert to another system
            gateway = ""

            # Enter a shared secret here. This is used to send and receive alerts via a gateway. (Secret needs to
            # be the same and not empty for two nodes to work together).
            gatewaySecret = ""

            # Notifies users listed here per mail. Enter mail addresses as strings like "a@test.xyz", "b@test.xyz"...
            mail = [ ]
        }
    }
}

# Contains settings used by the content generator (sirius.web.templates.Content).
content {
    # Sets the javax.scripting engine used to execute JavaScript
    script-engine = "js"

    localResourcePath = "data/resources"

    # Enumerates all marco libraries which are auto-loaded on startup
    velocity-libraries {
        standard = "velocity/standard.vm"
    }

    # Used by Content.getExtensions to build templates which can be enhanced by other components
    extensions {
    }
}

cache {
    # Cache used to store resolved URLs by the Content class
    resolver-cache {
        maxSize = 512
        ttl = 1 minute
    }

    # Caches compiled templates for tagliatelle
    tagliatelle-templates {
        maxSize = 512
        ttl = 1 hour
    }
}

# Make velocity not too chatty (the log4j name is 'velocity')
logging.velocity=WARN

# Contains the mail configuration used to send and receive mails
mail {
    # Used as X-MAILER header...
    mailer = "SIRIUS Java Library"

    # Configuration used to send mails. You should at least change host, sender and senderName!
    # As long as host is empty, no mail will be sent (not even tried)...
    smtp {

        # Host of the SMTP server
        host = ""

        # Port used by the SMTP server
        port = 25

        # Username used to authenticate at the SMTP server
        user = ""

        # Password used to authenticate at the SMTP server
        password = ""

        # Default address used as "From:" if no other address is given
        sender = ""

        # Default name of the "From:" if no name is given
        senderName = ""

        # Contains the settings required to enable DKIM
        dkim {

            # Contains the path to the DER encoded file containing the private key.
            # A key can be created using:
            # openssl genrsa -out dkim.pem 1024 (Generate keypair as PEM)
            # openssl pkcs8 -topk8 -nocrypt -in dkim.pem -outform der -out dkim.der (Save private key as DER)
            # openssl rsa -in dkim.pem -pubout (Save public key)
            keyFile = ""

            # Contains a list of domains to sign
            domains = []

            # Contains the DKIM selector used to sign (which is also used for the DNS lookup)
            selector = ""
        }
    }

    # Contains templates
    # A template can contain a "subject", a "text" which points to a velocity file to be evaluated as well as a
    # "html" property which points to a velocity macro generating the html content of the mail (optional).
    #
    # By default, the subject can also be set, by simply defining the "subject" property in the context passed
    # to MailSender.useTemplate.
    #
    # Additionally an "attachments" object can be defined in which each sub object wil create an attachment for the
    # mail. Each of these sub objects can specify a "template" which names to file used to generate the content
    # and a "fileName" will generates the file name for the attachment. If no fileName is given, the name (key)
    # will be used, where the last '-' is replaced by a '.'. Therefore test-pdf generates test.pdf as filename.
    #
    # Both subject and fileName can contain velocity template sources which will be evaluated.
    templates {

        # Used to notify an administrator, that one or several nodes are misbehaving.
        system-alert {
            subject = "WARNING: $app on $node is in state: $nodeState / Cluster is in state: $clusterState"
            text = "mail/system/alert.vm"
            html = "mail/system/alert-html.vm"
        }

    }
}

async.executor {

    # Determines the size of the email sender pool. We only send one mail at a time
    # but with an unlimited queue length
    email {
        poolSize = 1
        queueLength = 0
    }
}

# Defines the user management used by the application
security {

    # Defines roles assigned to EVERYBODY even without logging in...
    publicRoles = []

    # Declares which scope types are known to the system and which user manager they use. Multiple scopes can be
    # defined i.e. to differentiate between a user logged into an administration area vs. a user logged into the
    # frontend of the application. To control which scope is active, the interface ScopeDetector has to be
    # implemented and registered using @Register. By default the scope "default" is used for all requests.
    # Implement ScopeDetector to change this.
    scopes {

        # Defines the manager used by the default scope.
        default {

            # Determines which user manager to use. By default the "public" user manager is used, which grants
            # all permissions (well, those given in defaultRoles) without requiring a login. Use "config" to switch
            # to users defined in the system configuration or create your own by implementing UserManagerFactory and
            # UserManager.
            # manager = "public"

            # Defines roles granted to anonymous.
            publicRoles = [ "permission-system-state" ]

            # Defines roles granted to all "users".
            defaultRoles = [ "permission-system-state" ]

            # Defines roles granted to trusted users (Those whose IP match http.firewall.trustedIPs).
            trustedRoles = [ ]
            
            # Defines the session to be stored on the client side by default.
            sessionStorage = "client"
        }

        # Defines an user manager using the system config - Users are defined below
        # default {
        #    # Use the config manager
        #    manager = "config"
        #
        #    # Defines roles granted to anonymous.
        #     publicRoles = [ ]
        #
        #    # Define roles automatically granted to all users able to log in
        #    defaultRoles = [ ]
        #
        #    # Determine if and where a session is started. Use "server" for generic server sessions and "client" for
        #    # cookie based client sided sessions. Use "none" to disable sessions.
        #    sessionStorage = "server"
        #
        #    # Determine if a login via SSO token is also possible (see SSO example below)
        #    ssoEnabled = false
        #
        #    # Defines the shared secret used to compute the sso tokens (must be non-empty)
        #    ssoSecret = ""
        # }

        # Defines an user manager using single sign-on
        # SSO is performed by providing a parameter "user" along with a parameter "token". The token is a string
        # built like this: <timestamp>:<hash> where timestamp is the current time in seconds and hash is
        # a hash like this: MD5(ssoSecret + timestamp + username + roles). If parseRoles is false, "roles" is not
        # included in the hash. The used SHA1 instead of MD5, change "hashFunction" to "sha1"
        # default {
        #    # Use the SSO manager
        #    manager = "sso"
        #
        #    # Defines roles granted to anonymous.
        #     publicRoles = [ ]
        #
        #    # Define roles automatically granted to all users able to log in
        #    defaultRoles = [ ]
        #
        #    # Determines if the "roles" parameter should be parsed and granted to the user
        #    parseRoles = false
        #
        #    # If the login should be persisted in a session, we need to use server sessions to also persist all roles.
        #    # Use "none" to disable sessions.
        #    sessionStorage = "server"
        #
        #    # Enable SSO
        #    ssoEnabled = true
        #
        #    # Determines the hash function used to compute and verify SSO tokens
        #    hashFunction = "md5"
        #
        #    # Defines the shared secret used to compute the sso tokens (must be non-empty)
        #    ssoSecret = ""
        # }

        # Defines an ldap user manager used to access LDAP or ActiveDirectory servers
        # default {
        #    # Use the LDAP manager
        #    manager = "ldap"
        #
        #    # Appended to the begin of the user name before an authentication is performed
        #    authPrefix = ""
        #
        #    # Appended to the end of the user name before an authentication is performed
        #    authSuffix = ""
        #
        #    # Appended to the begin of the user name before a search is performed
        #    searchPrefix = ""
        #
        #    # Appended to the end of the user name before a search is performed
        #    searchSuffix = ""
        #
        #    # Defines the location of the LDAP server
        #    server = ""
        #
        #    # Determines if SSL should be used
        #    ssl = false
        #
        #    # Determines the object class we're looking for
        #    objectClass = "user"
        #
        #    # Determines the attribute we're searching in
        #    nameAttribute = "userPrincipalName"
        #
        #    # Determines the name of the attribute containing the roles
        #    returnedAtts = [ "memberOf" ]
        #
        #    # Determines the search base within the directory
        #    searchBase = ""
        #
        #    # Determines roles which must be present for a user to be accepted. All roles defined where must be
        #    # present.
        #    requiredRoles = [ ]
        #
        #    # Defines roles granted to anonymous.
        #     publicRoles = [ ]
        #
        #    # Default roles granted to all users
        #    defaultRoles = [ ]
        # }

    }

    # Defines a list of all known permissions for reporting reasons
    permissions {
        flag-logged-in : "Determines if an authorized user is present"
        permission-system-console : "Required to use the console"
        permission-system-state : "Required to view the system state"
        permission-system-scripting : "Required to execute ANY JavaScripts on the server(!)"
        permission-system-notify-state : "Required to receive a warning in wondergem, if the system state is not GREEN"
        permission-babelfish : "Required to view and export loaded translations"
        permission-view-scope-default-config : "Required to view the default config of scopes"
    }

    # Declares profiles. Profiles are meta permissions which represent a set of permissions. Once a user is
    # authorized, its permissions which reference profiles will be expanded automatically. This can be used to declare
    # permissions like "admin" which represent a multitude of permissions (which also might change over time).
    profiles {
    #    template {
    #        "permission1" : true,
    #        "permission2" : false
    #    }
    }

    # Lists all users known to the configuration based user manager. To access this set the "manager" property
    # of the target scope to "config".
    users {

        # Defines a template user to show which fields to declare. This user won't be able to log in, since its
        # passwordHash is empty.
        #template {
        #    # Contains the name of the user.
        #    name : "Template User"
        #
        #    # Contains the email address of the user.
        #    email : "someone@domain.com"
        #
        #    # Enumerate all permissions given to this user. Permissions will be expanded using profiles.
        #    permissions: [ "some-role" ]
        #
        #    # Provide a random salt used to compute the password hash
        #    salt : "5c29b8313cd04667c303b4d9950922a0"
        #
        #    # Use MD5(salt + password) to compute the value for password hash
        #    # An MD5 function is available on every decent OS or via the web console
        #    passwordHash : ""
        #}
    }
}

crunchlog {
    basedir = "data/crunchlog"
}

# Determines the hour of the day, when old files are deleted from the crunchlog
timer.daily.crunchlog-cleanup = 17

