<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the field."/>
<i:arg name="fieldClass" type="String" default="" description="Lists additional CSS classes to apply to the field."/>
<i:arg name="labelClass" type="String" default="" description="Lists additional CSS classes to apply to the label."/>
<i:arg name="name" type="String" default=""/>
<i:arg name="fieldName" type="String" default="@name"/>
<i:arg name="value" type="String"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="forceLabel" type="boolean" default="false"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="id" type="String" default="@generateId('colorpicker-%s')"/>
<i:arg name="placeholder" type="String" default=""/>
<i:arg name="tabIndex" type="String" default=""/>

<i:pragma name="description" value="Renders a color picker within a Tycho template"/>

<i:local name="textId"
         value="@isFilled(id) ? id : generateId('colorpicker-%s-text')"/>
<i:local name="colorId"
         value="@generateId('colorpicker-%s-color')"/>

<div class="form-group mb-3 @UserContext.get().signalFieldError(name) @class">
    <i:if test="isFilled(label) || forceLabel">
        <label class="form-label"><span class="@labelClass">@label</span></label>
    </i:if>

    <div class="input-group">
        <input @if(isFilled(fieldName)) { name="@fieldName" }
               id="@textId"
               type="text"
               value="@UserContext.get().getFieldValue(name, value)"
               class="form-control input-block-level @fieldClass"
               @if (isFilled(placeholder)) { placeholder="@placeholder" }
               @if (isFilled(tabIndex)) { tabindex="@tabIndex" }/>
        <input id="@colorId"
               type="color"
               value="@UserContext.get().getFieldValue(name, value)"
               class="form-control form-control-color"
               style="max-width: 3rem;">
    </div>

    <i:if test="isFilled(help)">
        <small class="form-text text-muted">
            <i:raw>@expandMessage(help)</i:raw>
        </small>
    </i:if>
    <i:if test="UserContext.get().hasError(name)">
        <small class="error-block form-text">@UserContext.get().getFieldErrorMessage(name)</small>
    </i:if>
    <script>
        sirius.ready(() => {
            const _textInput = document.querySelector('#@textId');
            const _colorInput = document.querySelector('#@colorId');

            function formatChannel(value) {
                return value.toString(16).padStart(2, '0')
            }

            function formatColor(red, green, blue) {
                return '#' + formatChannel(red) + formatChannel(green) + formatChannel(blue);
            }

            function convertColorToHex(color) {
                // create a dummy element with the given color
                const dummy = document.createElement('span');
                dummy.style.color = color;

                // shortly mount the dummy element in the DOM tree, in order to convert the color
                document.body.appendChild(dummy);
                const convertedColor = window.getComputedStyle(dummy).color;
                dummy.remove();

                // at this point, we get either an RGB or an RGBA color that we can convert back
                const rgbMatch = convertedColor.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*\d+)?\)/);
                if (rgbMatch) {
                    const red = parseInt(rgbMatch[1], 10);
                    const green = parseInt(rgbMatch[2], 10);
                    const blue = parseInt(rgbMatch[3], 10);
                    return formatColor(red, green, blue);
                }

                // reaching this point, we return solid black
                return '#000000';
            }

            _textInput.addEventListener('input', () => {
                const color = _textInput.value;
                _colorInput.value = convertColorToHex(color);
            });

            _colorInput.addEventListener('input', () => {
                _textInput.value = _colorInput.value;
            });

            // re-init the color picker, in case the value was not #rrggbb
            _colorInput.value = convertColorToHex("@UserContext.get().getFieldValue(name, value)");
        });
    </script>
</div>
