<i:arg type="String" name="id" default="@generateId('image-upload-%s')"/>
<i:arg type="String" name="labelKey" default="FileUpload.uploadBtn"/>
<i:arg type="String" name="label" default="@i18n(labelKey)"/>
<i:arg type="String" name="uploadUrl"/>
<i:arg type="String" name="currentImage"/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the dropzone."/>
<i:arg name="btnClass" type="String" default=""
       description="Lists additional CSS classes to apply to the upload button."/>
<i:arg type="String"
       name="acceptedFiles"
       default="image/*,application/pdf,svg"
       description="This is a comma separated list of allowed mime types or file extensions. Eg.: image/*,application/pdf,.psd"/>

<i:pragma name="description" value="Renders an image upload within a Tycho template"/>

<i:local name="previewId" value="@generateId('image-upload-preview-%s')"/>

<div class="dropzone sirius-imageupload card shadow-sm mb-4 @class" id="@id">
    <div class="sirius-upload-hover h-100 d-none flex-column align-items-center justify-content-center">
        <i class="fa fa-2x fa-cloud-upload-alt"></i>
        <span>@i18n("template.html.uploadArea")</span>
    </div>
    <div class="sirius-upload-content h-100 d-flex flex-column">
        <div class="img-preview d-flex justify-content-center align-items-center flex-grow-1 mb-4">
            <img class="mh-100 mw-100" id="@previewId" src="@currentImage"/>
        </div>
        <div class="dropzone-items mt-2 mb-2">
        </div>
        <a class="dropzone-select btn btn-primary @btnClass">@label</a>
        <i:render name="body"/>
    </div>
</div>

<script type="text/javascript">
    Dropzone.options[sirius.camelize('@id')] = {
        url: function (files) {
            const uploadUrl = '@raw {@uploadUrl}';
            let parameterIndicator = '?';
            if (uploadUrl.indexOf('?') >= 0) {
                parameterIndicator = '&';
            }
            return uploadUrl + parameterIndicator + 'filename=' + encodeURIComponent(files[0].name);
        },
        sendFileAsBody: true,
        parallelUploads: 1,
        maxFiles: 1,
        maxFilesize: null,
        acceptedFiles: '@raw {@acceptedFiles}',
        previewTemplate: '' +
            '<div class="dropzone-item">\n' +
            '   <div class="dropzone-file">\n' +
            '       <div class="dropzone-filename">\n' +
            '           <span data-dz-name></span>\n' +
            '           <strong>(<span data-dz-size></span>)</strong>\n' +
            '           <span class="dz-success-mark">✔</span>\n' +
            '           <span class="dz-error-mark">✘</span>\n' +
            '       </div>\n' +
            '       <div class="dropzone-error" data-dz-errormessage></div>\n' +
            '   </div>\n' +
            '\n' +
            '   <div class="dropzone-progress d-flex">\n' +
            '       <div class="progress flex-grow-1">\n' +
            '           <div class="progress-bar bg-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" ' +
            '                         aria-valuenow="0" data-dz-uploadprogress>' +
            '           </div>\n' +
            '       </div>\n' +
            '       <span class="dropzone-delete ml-4" data-dz-remove><i class="fa fa-times"></i></span>\n' +
            '   </div>\n' +
            '</div>',
        createImageThumbnails: false,
        previewsContainer: '#' + '@id' + ' .dropzone-items',
        clickable: '#' + '@id' + ' .dropzone-select',
        error: function (file, message) {
            if (file.status === Dropzone.CANCELED) {
                // no need to show error to the user
                return;
            }
            if (file.previewElement) {
                file.previewElement.classList.add('dz-error');

                if (typeof message !== 'string' && message.message) {
                    message = message.message;
                } else {
                    message = '___i18n("template.html.uploadFailed")';
                }

                file.previewElement.querySelector('[data-dz-errormessage]').innerHTML = message;
                addErrorMessage(message);
            }
        },
        init: function () {
            const dropzone = this;
            let _dropzoneIndicator = document.querySelector('#' + '@id' + ' .sirius-upload-hover');
            let _dropzoneContent = document.querySelector('#' + '@id' + ' .sirius-upload-content');

            function showIndicator() {
                _dropzoneIndicator.classList.add('d-flex');
                _dropzoneIndicator.classList.remove('d-none');
                _dropzoneContent.classList.add('d-none');
                _dropzoneContent.classList.remove('d-flex');
            }

            function hideIndicator() {
                _dropzoneIndicator.classList.remove('d-flex');
                _dropzoneIndicator.classList.add('d-none');
                _dropzoneIndicator.classList.remove('sirius-upload-hover-active');
                _dropzoneContent.classList.remove('d-none');
                _dropzoneContent.classList.add('d-flex');
            }

            document.addEventListener('dragenter', function (event) {
                showIndicator();
            }, false);
            document.addEventListener('dragend', function (event) {
                hideIndicator();
            }, false);
            document.addEventListener('dragleave', function (event) {
                if (event.relatedTarget === null) {
                    // left window
                    hideIndicator();
                }
            }, false);
            document.addEventListener('dragover', function (event) {
                event.preventDefault();
            });
            document.addEventListener('drop', function (event) {
                hideIndicator();
            }, false);
            _dropzoneIndicator.addEventListener('dragenter', function (event) {
                _dropzoneIndicator.classList.add('sirius-upload-hover-active');
            });
            _dropzoneIndicator.addEventListener('dragleave', function (event) {
                _dropzoneIndicator.classList.remove('sirius-upload-hover-active');
            });
            _dropzoneContent.addEventListener('dragenter', function (event) {
                showIndicator();
            });
            dropzone.on('drop', function () {
                hideIndicator();
            });

            sirius.warnOnUnload(function () {
                return dropzone.getUploadingFiles().length + dropzone.getQueuedFiles().length;
            });
            dropzone.on('success', function (file, response) {
                if (response.error) {
                    file.previewElement.classList.add('dz-error');
                    file.previewElement.classList.remove('dz-success');
                    const message = response.message || '___i18n("template.html.uploadFailed")';
                    file.previewElement.querySelector('[data-dz-errormessage]').innerHTML = message;
                    addErrorMessage(message);
                } else if (response.refresh) {
                    setTimeout(function () {
                        document.location.reload(true);
                    }, 2500);
                } else if (sirius.isFilled(response.imageUrl)) {
                    document.querySelector('#' + '@previewId').src = response.imageUrl;
                }
            });
        }
    }
</script>
