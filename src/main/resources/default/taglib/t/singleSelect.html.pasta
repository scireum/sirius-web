<i:arg name="id" type="String" default="@generateId('singleselect-%s')"/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the field."/>
<i:arg name="name" type="String"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="placeholderKey" type="String" default="template.html.selects.selection"/>
<i:arg name="placeholder" type="String" default="@i18n(placeholderKey)"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="optional" type="boolean" default="false"/>
<i:arg name="allowCustomEntries" type="boolean" default="false"/>
<i:arg name="suggestionUri" type="String" default=""/>

<i:pragma name="description">
    Renders a select field for a single value using the given parameters. Note that additional flags can be set via CSS
    classes (i.e. "required", "admin-only").
</i:pragma>

<div class="form-group @UserContext.get().signalFieldError(name) @class">
    <i:if test="isFilled(label)">
        <label><span>@label</span></label>
    </i:if>

    <i:local name="addon" value="@renderToString('addon')"/>
    <i:if test="isFilled(addon)">
        <div class="input-group">
            <div @id="@id" name="@name" class="form-control input-block-level">
                <i:render name="body"/>
            </div>
            <div class="input-group-append">
                <i:raw>@addon</i:raw>
            </div>
        </div>
        <i:else>
            <div @id="@id" name="@name" class="form-control input-block-level">
                <i:render name="body"/>
            </div>
        </i:else>
    </i:if>

    <i:if test="isFilled(help)">
        <small class="form-text text-muted">
            <i:raw>@expandMessage(help)</i:raw>
        </small>
    </i:if>
    <i:if test="UserContext.get().hasError(name)">
        <small class="error-block form-text">@UserContext.get().getFieldErrorMessage(name)</small>
    </i:if>
</div>
<script>
    sirius.ready(function () {
        const autocomplete = new TokenAutocomplete(
            Object.assign({
                selector: '#@id',
                name: '@name',
                selectMode: SelectModes.SINGLE,
                allowCustomEntries: ___allowCustomEntries,
                readonly: ___readonly,
                optional: ___optional,
                enableTabulator: false,
                noMatchesText: '@i18n("template.html.selects.noMatches")',
                noMatchesCustomEntriesDescription: '@i18n("template.html.selects.useCustomEntry")',
                placeholderText: '@placeholder',
                suggestionsUri: '@suggestionUri'
            }, <i:render name="autocompleteOptions"/>));

        <i:render name="script"/>
    });
</script>
