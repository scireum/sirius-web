<script type="text/javascript">
    function createConfirmForDangerousLinks() {
        $("a.link-danger, a.button-danger-ask").on('click', function (event) {
            if ($(this).hasClass("guarded-link")) {
                try {
                    var modalElement = $("#danger-link-confirm");
                    var submitBtn = modalElement.find(":submit");
                    var that = $(this);

                    submitBtn.click(function () {
                        $("#" + that.data("deleteid")).submit();
                    });

                    modalElement.modal({
                        keyboard: true
                    }).on("hide", function () {
                        modalElement.find(":submit").unbind("click");
                    }).on("shown", function () {
                        modalElement.find(".btn-close").focus();
                    }).attr("tabindex", -1);
                } catch ($e) {
                    console.log($e);
                }

                return false;
            } else {
                try {
                    var clickedLink = event.currentTarget;
                    var modalElement = $("#danger-link-confirm");

                    var okayLink = $(clickedLink).attr('href');
                    var submitBtn = modalElement.find(":submit");

                    submitBtn.click(function () {
                        window.location.href = okayLink;
                    });

                    modalElement.modal({
                        keyboard: true
                    }).on("hide", function () {
                        modalElement.find(":submit").unbind("click");
                    }).on("shown", function () {
                        modalElement.find(".btn-close").focus();
                    }).attr("tabindex", -1);
                } catch ($e) {
                    console.log($e);
                }

                return false;
            }
        });
    }

    function instanciateColorPickers() {
        $('.pick-a-color').colorpicker();
    }

    $(document).ready(function () {
        createConfirmForDangerousLinks();
        instanciateColorPickers();

        $('.date-picker').datetimepicker({
            locale: "@lang",
            ignoreReadonly: true,
            keepInvalid: true,
            useCurrent: false,
            showTodayButton: true,
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-history',
                clear: 'fa fa-trash',
                close: 'fa fa-remove'
            }
        });

        $(window).resize(invokeResizeHandler);
        invokeResizeHandler();
    });

    if (typeof window.console === "undefined") {
        window.console = {
            log: function (msg) {
            }
        };
    }

    function invokeResizeHandler() {
        try {
            if (typeof handleResize === 'function') {
                // Invoke custom handler
                handleResize();
            } else {
                var newHeight = $(window).height() - $('.footer').outerHeight() - $('#mainContainer').position().top;
                $('#mainContainer').css('min-height', newHeight + 'px');
            }
        } catch (e) {
            console.log(e);
        }
    }

    function addInfo(message, action, actionLabel) {
        if (action) {
            $('<div class="alert alert-info">' + message + ' <a class="link link-info" href="' + action + '">' + actionLabel + '</a></div>').appendTo($('#messageBox'));
        } else {
            $('<div class="alert alert-info"></div>').html(message).appendTo($('#messageBox'));
        }
    }

    function addError(message) {
        $('<div class="alert alert-danger"></div>').html(message).appendTo($('#messageBox'));
    }

    function clearMessages() {
        $('#messageBox').html('');
    }

    function autoUpdate(reloadUrl) {
        var yscroll = getUrlParameters(window.location.href)['yscroll'];
        if (typeof yscroll !== 'undefined') {
            $(window).scrollTop(yscroll);
        }
        setTimeout(function () {
            var yscroll = $(window).scrollTop();
            if (yscroll > 0) {
                var params = getUrlParameters(decodeURIComponent(reloadUrl).replace(/\+/g, '%20'));
                params['yscroll'] = yscroll;
                reloadUrl = reloadUrl.split('?')[0] + '?' + $.param(params);
            }
            window.location.replace(reloadUrl);
        }, 10000);
    }

    function getUrlParameters(url) {
        var params = {}, param;
        var query = url.split('?')[1];
        if (query !== undefined) {
            query = query.split('&');
            for (var i = 0; i < query.length; i++) {
                param = query[i].split('=');
                params[param[0]] = param[1];
            }
        }
        return params;
    }

    function imageUpload(url, target, defaultPreview, defaultImage, allowedExtensions) {
        var container = target;
        new qq.FileUploader({
            element: target,
            action: url,
            debug: false,
            onComplete: function (cmp_id, fileName, responseJSON) {
                clearMessages();
                if (responseJSON.error) {
                    addError(responseJSON.message);
                } else if (responseJSON.message) {
                    addInfo(responseJSON.message);
                }
                if (responseJSON.previewUrl) {
                    $('.img', container).attr('src', responseJSON.previewUrl);
                    $('.lnk', container).attr('href', responseJSON.imageUrl);
                }
                if (responseJSON.redirect) {
                    setTimeout(function () {
                        window.location = responseJSON.redirect;
                    }, 1250);
                }
            },
            showMessage: function (message) {
                // We generally send a flag "error" which is true or false as
                // part of the response. Sadly, fileUploader.js checks for this
                // flag (expecting a string) and invokes showMessage is present.
                // Therefore we have to filter this here :-/
                if (message !== true) {
                    clearMessages();
                    addError(message);
                }
            },
            messages: {
                typeError: '@i18n("template.html.errInvalidExtension")',
                sizeError: '@i18n("template.html.errTooLarge")',
                minSizeError: '@i18n("template.html.errTooSmall")',
                emptyError: '@i18n("template.html.errEmpty")'
            },
            allowedExtensions: allowedExtensions,
            template: '<div class="qq-uploader">' +
                '<div class="qq-upload-drop-area qq-image-area"><div><span style="display: inline-block"><a href="' + defaultImage + '" class="thumbnail lnk"><img class="img" src="' + defaultPreview + '" /></a></span></div><span>@i18n("template.html.uploadArea")</span></div>' +
                '<div class="qq-upload-button btn btn-primary" style="display: block">@i18n("template.html.uploadBtn")</div>' +
                '<ul class="qq-upload-list"></ul>' +
                '</div>',
            fileTemplate: '<li>' +
                '<span class="qq-upload-file"></span>' +
                '<span class="qq-upload-spinner"></span>' +
                '<span class="qq-upload-size"></span>' +
                '<a class="qq-upload-cancel" href="#">@i18n("NLS.cancel")</a>' +
                '<span class="qq-upload-failed-text">@i18n("template.html.uploadFailed")</span>' +
                '</li>'
        });
        var maxWidth = $(container).width();
        $('.img', container).css('max-width', maxWidth - 30 + 'px');
    }

    function fileUpload(url, target, params, allowedExtensions, maxParallelConnections) {
        var container = target;

        new qq.FileUploader({
            element: target,
            action: url,
            params: params,
            debug: false,
            maxConnections: maxParallelConnections || 3,
            onComplete: function (cmp_id, fileName, responseJSON) {
                clearMessages();
                if (responseJSON.error) {
                    addError(responseJSON.message);
                } else if (responseJSON.message) {
                    if (responseJSON.action) {
                        addInfo(responseJSON.message, responseJSON.action, responseJSON.actionLabel);
                    } else {
                        addInfo(responseJSON.message);
                    }
                }
                if (responseJSON.refresh) {
                    setTimeout(function () {
                        var editForm = $('#editForm');
                        if (editForm.length) {
                            $('#uploadedFile').val(responseJSON.fileId);
                            editForm.submit();
                        } else {
                            window.location.reload();
                        }
                    }, 1250);
                }
            },
            showMessage: function (message) {
                // We generally send a flag "error" which is true or false as
                // part of the response. Sadly, fileUploader.js checks for this
                // flag (expecting a string) and invokes showMessage is present.
                // Therefore we have to filter this here :-/
                if (message !== true) {
                    clearMessages();
                    addError(message);
                }
            },
            messages: {
                typeError: '@i18n("template.html.errInvalidExtension")',
                sizeError: '@i18n("template.html.errTooLarge")',
                minSizeError: '@i18n("template.html.errTooSmall")',
                emptyError: '@i18n("template.html.errEmpty")'
            },
            allowedExtensions: allowedExtensions,
            template: '<div class="qq-uploader">' +
                '<div class="qq-upload-drop-area"><span>@i18n("template.html.uploadArea")</span></div>' +
                '<div class="qq-upload-button btn btn-primary" style="display: block">@i18n("template.html.uploadBtn")</div>' +
                '<ul class="qq-upload-list"></ul>' +
                '</div>',
            fileTemplate: '<li>' +
                '<span class="qq-upload-file"></span>' +
                '<span class="qq-upload-spinner"></span>' +
                '<span class="qq-upload-size"></span>' +
                '<a class="qq-upload-cancel" href="#">@i18n("NLS.cancel")</a>' +
                '<span class="qq-upload-failed-text">@i18n("template.html.uploadFailed")</span>' +
                '</li>'
        });
    }

    function updateField(url, field, value) {
        var data = {};
        data[field] = value;
        $.post(url,
            data,
            function (json) {
                clearMessages();
                if (json.error) {
                    addError(json.message);
                } else {
                    addInfo('@i18n("BasicController.changesSaved")');
                }
            }, 'json');
    }

    $(function () {
        $('.submit-link').click(function () {
            if (!$(this).hasClass("single-click-pending")) {
                $('#editForm').submit();
            }
        });
        $('.single-click-link').click(function (e) {
            var a = $(this);
            if (a.hasClass("single-click-pending")) {
                e.preventDefault();
                return false;
            }
            a.addClass("single-click-pending");
        });
    });

    var CHART_COLORS = ["#5cbae6", "#fac364", "#b6d957", "#8cd3ff", "#d998cb", "#f2d249", "#93b9c6", "#ccc5a8", "#52bacc", "#dbdb46", "#98aafb"];
    var LINE_CHART_DEFAULT_OPTIONS = {
        responsive: true,
        maintainAspectRatio: false,
        bezierCurve: true,
        legend: {display: false},
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true,
                }
            }],
            xAxes: [{
                ticks: {
                    autoSkip: false
                }
            }]
        }
    };

    function lineChart(selector, labels, datasets) {
        var lineData = [];
        for (var i = 0; i < datasets.length; i++) {
            var color = CHART_COLORS[i % CHART_COLORS.length];
            lineData.push({
                backgroundColor: "rgba(180,180,180,0.2)",
                borderColor: color,
                pointColor: color,
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: color,
                label: datasets[i].label,
                data: datasets[i].data
            });
        }
        new Chart($(selector).get(0).getContext("2d"),
            {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: lineData
                },
                options: $.extend(LINE_CHART_DEFAULT_OPTIONS, {legend: {display: datasets.length > 1}})
            });
    }

    function barChart(selector, labels, datasets) {
        var barData = [];
        for (var i = 0; i < datasets.length; i++) {
            var color = CHART_COLORS[i % CHART_COLORS.length];
            barData.push({
                backgroundColor: color,
                borderColor: color,
                pointColor: color,
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: color,
                label: datasets[i].label,
                data: datasets[i].data
            });
        }
        new Chart($(selector).get(0).getContext("2d"),
            {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: barData
                },
                options: $.extend(LINE_CHART_DEFAULT_OPTIONS, {legend: {display: datasets.length > 1}})
            });
    }

    function polarAreaChart(selector, labels, data, dataUnit) {
        var options = {
            startAngle: -0.55 * Math.PI
        };

        if (dataUnit) {
            options.scale = {
                ticks: {
                    userCallback: function (value) {
                        return Math.round(value * 10) / 10 + ' ' + dataUnit;
                    }
                }
            }
        }

        new Chart($(selector).get(0).getContext("2d"), {
            data: {
                datasets: [{
                    data: data,
                    backgroundColor: CHART_COLORS
                }],
                labels: labels
            },
            type: 'polarArea',
            options: options
        });
    }

    function dougnutChart(selector, labels, data) {
        new Chart($(selector).get(0).getContext("2d"), {
            data: {
                datasets: [{
                    data: data,
                    backgroundColor: CHART_COLORS
                }],
                labels: labels
            },
            type: 'doughnut',
            options: {
                startAngle: -0.55 * Math.PI
            }
        });
    }

    $(document).ready(function () {
        $('.sparkline').each(function () {
            var $this = $(this);
            var element = $this.get(0);
            sparkline(element);
        });
    });
</script>
