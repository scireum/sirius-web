(function (overlay) {
    const template = '<div class="sci-overlay-background sci-overlay-hidden">' +
        '    <div class="sci-overlay">' +
        '        {{#closable}}<div class="sci-overlay-button-container">' +
        '            <a role="button" class="sci-overlay-button sci-overlay-button-close sci-overlay-button-close-js"></a>' +
        '        </div>{{/closable}}' +
        '        <div class="sci-overlay-content sci-overlay-content-js">' +
        '            {{{content}}}' +
        '        </div>' +
        '   </div>' +
        '</div>';

    /**@
     * Stores a reference to the DOM element of the currently open overlay (or null if no overlay is currently open).
     */
    let _overlay = null;
    let shouldEscClose = null;

    /**@
     * Creates a new (hidden) overlay. This can be made visible to the user afterwards by calling `overlay.showOverlay`.
     *
     * @param {Object} args map specifying the content and behaviour of the created overlay
     * @param {string|HTMLElement} args.content HTML content that will be rendered inside the overlay
     * @param {boolean} [args.closable]  allows to indicate whether to render a close button; defaults to **true**
     * @param {boolean} [args.yieldable] allows to indicate whether a background-click closes the overlay; defaults to the value of `closable`
     * @param {boolean} [args.useFullScreen] allows to indicate that the overlay should use all available screen size without margins; defaults to **false**
     * @param {function} [args.escClosingPredicate] allows to determine whether the overlay should be closed if ESC key is pressed; Return **true** if the overlay should be closed, **false** otherwise.
     */
    overlay.createOverlay = function (args) {
        const isStringContent = args.content instanceof String || typeof args.content === 'string';
        const isNodeContent = args.content instanceof HTMLElement;

        if (!isStringContent && !isNodeContent) {
            throw new Error('Content must either be a string or an object of class HTMLElement.');
        }

        if (args.name) {
            console.debug('Overlay names are no longer supported:', args.name);
        }

        if (_overlay) {
            overlay.destroyOverlay();
        }

        // Reset viewport zoom if user zoomed in via pinch to zoom gesture. If not done it could possibly lead to the user
        // not being able to close the overlay when the close button is rendered outside the visible area.
        sirius.resetMobileZoom();

        // Blur the current focus target, since it will be in the background now.
        if (document.activeElement) {
            document.activeElement.blur();
        }

        const closable = typeof args.closable === 'undefined' ? true : !!args.closable;
        const yieldable = typeof args.yieldable === 'undefined' ? closable : !!args.yieldable;
        const useFullScreen = typeof args.useFullScreen === 'undefined' ? false : !!args.useFullScreen;

        const renderArgs = {
            closable: closable,
            content: isStringContent ? args.content : undefined
        };

        const _html = Mustache.render(template, renderArgs);
        const _overlayContainer = document.createElement('div');
        _overlayContainer.innerHTML = _html;

        if (isNodeContent) {
            const _contentContainer = _overlayContainer.querySelector('.sci-overlay-content-js');
            _contentContainer.appendChild(args.content);
        }

        _overlay = _overlayContainer.firstChild;

        if (closable) {
            _overlay.querySelector('.sci-overlay-button-close-js').addEventListener('click', function () {
                sirius.dispatchEvent('sci-overlay-dismissed');
                overlay.destroyOverlay();
            });
        }

        if (yieldable) {
            _overlay.addEventListener('click', function (event) {
                if (event.target === _overlay) {
                    sirius.dispatchEvent('sci-overlay-dismissed');
                    overlay.destroyOverlay();
                }
            });
        }

        if (useFullScreen) {
            _overlay.querySelector('.sci-overlay').classList.add('sci-overlay-use-full-screen');
        }

        document.documentElement.classList.add('sci-overlay-static-body');

        if (typeof args.escClosingPredicate === 'function') {
            shouldEscClose = args.escClosingPredicate;
        } else {
            shouldEscClose = true;
        }

        window.addEventListener('keyup', destroyOverlayEventHandler);
        document.body.appendChild(_overlay);

        if (isStringContent) {
            sirius.executeEmbeddedScripts(_overlay);
        }

        sirius.dispatchEvent('sci-overlay-created');
    }

    /**@
     * Shows the previously created (via `overlay.createOverlay`) overlay.
     */
    overlay.showOverlay = function () {
        if (_overlay) {
            _overlay.classList.remove('sci-overlay-hidden');
            sirius.dispatchEvent('sci-overlay-shown');
        }
    }

    /**@
     * Closes the currently open overlay (if one is open) and cleans up listeners.
     */
    overlay.destroyOverlay = function () {
        if (_overlay) {
            _overlay.parentElement.removeChild(_overlay);
            _overlay = null;
        }

        window.removeEventListener('keyup', destroyOverlayEventHandler);
        document.documentElement.classList.remove('sci-overlay-static-body');

        sirius.dispatchEvent('sci-overlay-destroyed');
    }

    const destroyOverlayEventHandler = function (event) {
        if (event.key === 'Escape' && (shouldEscClose === true || shouldEscClose())) {
            sirius.dispatchEvent('sci-overlay-dismissed');
            overlay.destroyOverlay();
        }
    }
}(window.sirius.overlay = window.sirius.overlay || {}));
