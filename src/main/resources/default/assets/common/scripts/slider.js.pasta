(function (slider) {

    /**@
     * Initializes a slider.
     * <p>
     * Before calling this function, the slider already has to exist in the form of a html node containing all slides
     * as 'div' child nodes.
     *
     * @param {string} target
     *        CSS selector for the outer html node containing all slides as child nodes
     * @param {Object} [options]
     *        configuration specifying the behaviour of the slider
     * @param {number} [options.animation]
     *        time in milliseconds before switching to the next view automatically, no automatic sliding if `undefined`
     * @param {('fade'|'slide')} [options.transition]
     *        transition animation style when sliding, defaults to no animation when `undefined`; fading only works if
     *        `columns` is set to 1
     * @param {number} [options.columns=1]
     *        number of columns to show at a time, by default 1
     * @param {number} [options.columnsMd=columns]
     *        number of columns to show at a time on medium-sized screens, by default equal to `columns`; must not be
     *        larger than `columns`
     * @param {number} [options.columnsSm=columnsMd]
     *        number of columns to show at a time on small-sized screens, by default equal to `columnsMd`; must not be
     *        larger than `columnsMd`
     * @param {boolean} [options.interrupt=false]
     *        if **true**, automatic sliding will be suspended while the mouse pointer hovers over the slider
     * @param {boolean} [options.arrows=false]
     *        if **true**, clickable arrows for the previous and next views are rendered on the left and on the right of
     *        the content, respectively
     * @param {boolean} [options.dots]
     *        if **true**, clickable dots showing the currently selected view are rendered below the content
     */
    slider.initSlider = function (target, options) {
        const TRANSITION_BLEND = 'blend';
        const TRANSITION_FADE = 'fade';
        const TRANSITION_SLIDE = 'slide';

        const DEFAULT_ANIMATION = 5000;

        options = options || {};
        options.animation = options.animation || 0;
        options.columns = options.columns || 1;
        options.columnsMd = options.columnsMd || options.columns;
        options.columnsSm = options.columnsSm || options.columnsMd;
        options.arrows = !!options.arrows;
        options.dots = !!options.dots;
        options.interrupt = !!options.interrupt;

        if (options.columns <= 0) {
            console.warn('Invalid number of columns, defaulting to 1.');
            options.columns = 1;
        }
        if (options.columnsMd <= 0) {
            console.warn('Invalid number of columns on medium screens, defaulting to 1.');
            options.columnsMd = 1;
        }
        if (options.columnsSm <= 0) {
            console.warn('Invalid number of columns on small screens, defaulting to 1.');
            options.columnsSm = 1;
        }
        if (options.animation < 0) {
            console.warn('Invalid animation timing, defaulting to ' + (DEFAULT_ANIMATION / 1000) + ' seconds.');
            options.animation = DEFAULT_ANIMATION;
        }
        if (options.transition === TRANSITION_FADE) {
            options.transition = TRANSITION_BLEND;
        }
        if (options.transition && options.transition !== TRANSITION_BLEND && options.transition !== TRANSITION_SLIDE) {
            console.warn('Invalid transition identifier, disabling transition.');
            options.transition = undefined;
        }

        if (options.columnsMd > options.columns) {
            console.warn('Number of columns on a medium screen must not be larger than the number of columns on a normal screens. Resetting to ' + options.columns + '.');
            options.columnsMd = options.columns;
        }
        if (options.columnsSm > options.columnsMd) {
            console.warn('Number of columns on a small screen must not be larger than the number of columns on a medium screens. Resetting to ' + options.columnsMd + '.');
            options.columnsSm = options.columnsMd;
        }
        if (options.columns > 1 && options.transition === TRANSITION_BLEND) {
            console.warn('Blending only works for one column, disabling transition.');
            options.transition = undefined;
        }

        // we remember the number of columns in a local variable, as the value may change according to the screen size,
        // assuming any of the values `options.columns`, `options.columnsMd`, or `options.columnsSm`
        let columns = options.columns;

        const _slider = document.querySelector(target);

        // obtain all the child nodes of the slider and mark them as "slider views"
        const _slides = Array.prototype.slice.call(_slider.childNodes).filter(function (node) {
            return node.tagName === 'DIV';
        });
        if (_slides.length < 2) {
            return;
        }
        _slides.forEach(function (_slide) {
            _slide.classList.add('sci-slider-view');
        });

        // create a wrapper node replacing (and later nesting) the original slider node
        const _wrapper = document.createElement('div');
        _wrapper.classList.add('sci-slider-wrapper');
        _slider.parentNode.replaceChild(_wrapper, _slider);

        // move classes from the original slider div to the wrapper, and add a marker to the slider itself
        while (_slider.classList.length > 0) {
            const clazz = _slider.classList.item(0);
            _wrapper.classList.add(clazz);
            _slider.classList.remove(clazz);
        }
        _slider.classList.add('sci-slider');

        // within the slider is a stack of up to two divs, the slider with the navigation arrows on top, and the dots
        // below
        const _top = document.createElement('div');
        _top.classList.add('sci-slider-top');
        _wrapper.appendChild(_top);

        if (options.arrows) {
            const _previousArrow = document.createElement('div');
            _previousArrow.classList.add('sci-slider-button');
            _previousArrow.classList.add('sci-slider-previous');
            const _previousIcon = document.createElement('a');
            _previousIcon.classList.add('sci-slider-previous-icon');
            _previousArrow.appendChild(_previousIcon);
            _top.appendChild(_previousArrow);
            _previousArrow.addEventListener('click', function (event) {
                stopAnimationThread();
                activatePreviousView();
                startAnimationThread();
            });
        }

        _top.appendChild(_slider);

        if (options.arrows) {
            const _nextArrow = document.createElement('div');
            _nextArrow.classList.add('sci-slider-button');
            _nextArrow.classList.add('sci-slider-next');
            const _nextIcon = document.createElement('a');
            _nextIcon.classList.add('sci-slider-next-icon');
            _nextArrow.appendChild(_nextIcon);
            _top.appendChild(_nextArrow);
            _nextArrow.addEventListener('click', function (event) {
                stopAnimationThread();
                activateNextView();
                startAnimationThread();
            });
        }

        let _dots = null;
        if (options.dots) {
            _dots = document.createElement('div');
            _dots.classList.add('sci-slider-dots');
            _wrapper.appendChild(_dots);
            _slides.forEach(function (_slide, index) {
                const _dot = document.createElement('a');
                _dot.textContent = '‚óè';
                _dot.addEventListener('click', function (event) {
                    stopAnimationThread();
                    activateView(index, 1, columns !== 1);
                    startAnimationThread();
                });
                _dot.classList.add('sci-slider-dot');
                _dots.appendChild(_dot);
            });
        }

        const resetAllSlides = function (callback) {
            _slides.forEach(function (_slide) {
                // set up the slide to fill the entire view within the slider, and not more
                _slide.style.position = 'absolute';
                _slide.style.left = '0';
                _slide.style.width = (_slider.offsetWidth / columns) + 'px';
                _slide.style.maxWidth = (_slider.offsetWidth / columns) + 'px';
                _slide.style.overflow = 'hidden';

                // the slide is limited to the width provided by the slider, but we want to center the content; we do
                // this by virtually scrolling the over-sized content such that it is centered
                _slide.scrollLeft = 0.5 * (_slide.scrollWidth - _slider.offsetWidth / columns);

                _slide.style.visibility = 'hidden';

                if (callback) {
                    callback(_slide.style);
                }
            });
        };

        let interruptedDueToMouseInteraction = false;
        if (options.interrupt) {
            _wrapper.addEventListener('mouseenter', function (event) {
                interruptedDueToMouseInteraction = true;
            });
            _wrapper.addEventListener('mouseleave', function (event) {
                interruptedDueToMouseInteraction = false;
            });
        }

        let previousIndex = 0;
        let currentIndex = 0;

        const activateAllSlides = function () {
            resetAllSlides(function (style) {
                style.transition = '';
            });

            const widthPerSlide = _slider.offsetWidth / columns;
            const totalWidth = _slides.length * widthPerSlide;
            const offset = 0.5 * (_slider.offsetWidth - totalWidth);

            for (let i = 0; i < _slides.length; i++) {
                _slides[i].style.left = (offset + i * widthPerSlide) + 'px';
                _slides[i].style.visibility = 'visible';
            }
        };

        const activateViewWithoutAnimation = function () {
            // set all but the currently active view hidden
            resetAllSlides(function (style) {
                style.transition = '';
            });

            // activate the next `columns` views following and including the current index
            const widthPerSlide = _slider.offsetWidth / columns;
            for (let i = 0; i < columns; i++) {
                const index = (currentIndex + i) % _slides.length;
                _slides[index].style.visibility = 'visible';
                _slides[index].style.left = (i * widthPerSlide) + 'px';
            }
        };

        const activateViewByBlending = function () {
            // set all but the previously and currently active view hidden
            resetAllSlides(function (style) {
                style.opacity = '0';
                style.zIndex = '0';
                style.transition = 'opacity 1s ease';
            });
            _slides[previousIndex].style.visibility = 'visible';
            _slides[currentIndex].style.visibility = 'visible';

            // cross-blend the previous and current view, with the latter on top
            _slides[previousIndex].style.zIndex = '0';
            _slides[previousIndex].style.opacity = '0';
            _slides[currentIndex].style.zIndex = '1';
            _slides[currentIndex].style.opacity = '1';
        };

        const activateViewBySliding = function (direction) {
            const widthPerSlide = _slider.offsetWidth / columns;

            // compute the initial and final positions of the current and previous slides
            const previousFrom = 0, currentTo = 0;
            let previousTo = 0, currentFrom = 0;
            if (direction > 0) {
                currentFrom = widthPerSlide;
                previousTo = -widthPerSlide;
            } else {
                currentFrom = -widthPerSlide;
                previousTo = widthPerSlide;
            }

            // without any animation, set the initial state
            resetAllSlides(function (style) {
                style.transition = '';
            });

            _slides[previousIndex].style.visibility = 'visible';
            _slides[previousIndex].style.left = previousFrom + 'px';
            _slides[previousIndex].style.zIndex = '0';

            const limit = (direction > 0) ? columns : (columns + 1);

            // activate the next `columns` views following and including the current index
            for (let i = 0; i < limit; i++) {
                const index = (currentIndex + i) % _slides.length;
                _slides[index].style.visibility = 'visible';
                _slides[index].style.left = (currentFrom + i * widthPerSlide) + 'px';
                _slides[index].style.zIndex = '1';
            }

            // after some time, to allow layouting to settle, trigger the actual animation
            setTimeout(function () {
                _slides[previousIndex].style.transition = 'left 1s ease';
                _slides[previousIndex].style.left = previousTo + 'px';

                for (let i = 0; i < limit; i++) {
                    const index = (currentIndex + i) % _slides.length;
                    _slides[index].style.transition = 'left 1s ease';
                    _slides[index].style.left = (currentTo + i * widthPerSlide) + 'px';
                }
            }, 50);
        };

        const activateView = function (index, direction, statically) {
            if (isNaN(index) || index < 0 || index >= _slides.length) {
                return;
            }
            if (typeof direction === 'undefined') {
                direction = 1;
            }

            previousIndex = currentIndex;
            currentIndex = index;
            statically |= previousIndex === currentIndex;

            _slides[previousIndex].classList.remove("sci-slider-view-active");
            _slides[currentIndex].classList.add("sci-slider-view-active");

            if (_dots) {
                const _dotList = _dots.childNodes;

                // deactivate all dots
                for (let i = 0; i < _dotList.length; i++) {
                    _dotList.item(i).classList.remove("sci-slider-dot-active");
                }

                // activate the dots for the current view and the next `columns` views
                for (let i = 0; i < columns; i++) {
                    _dotList.item((currentIndex + i) % _slides.length).classList.add("sci-slider-dot-active");
                }
            }

            if (_slides.length <= columns) {
                activateAllSlides();
            } else if (!statically && options.transition === TRANSITION_BLEND) {
                activateViewByBlending();
            } else if (!statically && options.transition === TRANSITION_SLIDE) {
                activateViewBySliding(direction);
            } else {
                activateViewWithoutAnimation();
            }

            fixSliderHeight();
        };
        const activateNextView = function () {
            activateView((currentIndex + 1) % _slides.length, 1);
        };
        const activatePreviousView = function () {
            activateView((currentIndex - 1 + _slides.length) % _slides.length, -1);
        };

        const fixSliderHeight = function () {
            let containerHeight = 0;
            _slides.forEach(function (_slide) {
                containerHeight = Math.max(containerHeight, _slide.offsetHeight);
            });
            _slider.style.height = containerHeight + 'px';
        };

        const fixView = function () {
            // detemine the number of columns to use according to the current screen size; we use the break points
            // defined for the front-end design system, see `/assets/design-system/design-system.scss`
            if (window.innerWidth) {
                if (window.innerWidth < 992) {
                    columns = options.columnsSm;
                } else if (window.innerWidth < 1200) {
                    columns = options.columnsMd;
                } else {
                    columns = options.columns;
                }
            }

            fixSliderHeight();
            activateView(currentIndex, 1, true);
        };

        // upon resize, trigger a debounced graphics refresh
        let interruptedWhileChangingSize = false;
        let fixViewTimeout = null;
        let restartAnimationTimeout = null;
        window.addEventListener('resize', function (event) {
            // interrupt animation for at least a second, not to have it interfere with the resize
            interruptedWhileChangingSize = true;
            if (restartAnimationTimeout) {
                clearTimeout(restartAnimationTimeout);
            }
            restartAnimationTimeout = setTimeout(function () {
                interruptedWhileChangingSize = false;
            }, 1000);

            if (fixViewTimeout) {
                clearTimeout(fixViewTimeout);
            }
            fixViewTimeout = setTimeout(function () {
                fixView();
            }, 10);
        });

        const initAnimation = function () {
            if (options.transition === TRANSITION_BLEND) {
                // hide all views by setting them fully transparent and sorting them down on the stack
                resetAllSlides(function (style) {
                    style.opacity = '0';
                    style.zIndex = '0';
                    style.transition = 'opacity 1s ease';
                });

                _slides[0].style.opacity = '1';
                _slides[0].style.zIndex = '1';
                _slides[0].style.visibility = 'visible';
            } else {
                resetAllSlides();
                _slides[0].style.visibility = 'visible';
            }
        };

        let animationTimer = null;
        const startAnimationThread = function () {
            stopAnimationThread();

            animationTimer = setInterval(function () {
                if (!document.body.contains(_slider)) {
                    stopAnimationThread();
                    return;
                }
                fixView();
                if (options.animation && !interruptedDueToMouseInteraction && !interruptedWhileChangingSize) {
                    activateNextView();
                }
            }, options.animation || DEFAULT_ANIMATION);
        };
        const stopAnimationThread = function () {
            if (animationTimer) {
                clearInterval(animationTimer);
                animationTimer = null;
            }
        };

        initAnimation();
        fixSliderHeight();
        activateView(0, 1, true);
        startAnimationThread();

        setTimeout(fixView, 500);
    }
}(window.sirius.slider = window.sirius.slider || {}));
