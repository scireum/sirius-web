window.sirius.Accordion = (function () {
    /**@
     * Initializes a collapsible accordion.
     * <p>
     * Before calling this function, the accordion toggle and content already have to exist in the form of two html nodes.
     *
     * @param toggle  clickable DOM Element that should toggle the expanded/collapsed state of the content
     * @param content DOM Element that contains the actual elements that should be shown/hidden when toggle is pressed
     * @param options optional object specifying the behaviour of the slider (see constants for possible values):
     *                 - animate:  Whether collapsing and expanding of the content should be animated
     *                 - showInitially:  Whether the content should be visible after the initialization is completed
     */
    function Accordion(toggle, content, options) {
        this._toggle = toggle;
        this._toggle.classList.add('sci-accordion-toggle');

        this._content = content;
        this._content.classList.add('sci-accordion-content');

        this.animate = false;
        if (options && options.animate) {
            this._toggle.classList.add('sci-accordion-animate');
            this._content.classList.add('sci-accordion-animate');
            this.animate = true;
        }

        if (options && options.showInitially) {
            this.showContent();
        } else {
            this.hideContent();
        }

        const me = this;
        this._toggle.addEventListener('click', function () {
            me.toggleContent();
        });
    }

    Accordion.prototype.toggleContent = function () {
        if (this._content.classList.contains('sci-accordion-active')) {
            this.hideContent();
        } else {
            this.showContent();
        }
    };

    Accordion.prototype.hideContent = function () {

        const me = this;
        const hide = function () {
            me._content.classList.remove('sci-accordion-active');
            me._toggle.classList.remove('sci-accordion-active');
            me._content.style.maxHeight = null;
        };

        if (!this.animate) {
            hide();
            return;
        }

        // if the accordion is set to animate, we need to restore the max-height, in order to animate back to zero after
        // the next DOM tree refresh
        this._content.style.maxHeight = this._content.scrollHeight + 'px';
        setTimeout(hide, 0);
    };

    Accordion.prototype.showContent = function () {

        const me = this;
        const show = function () {
            me._content.classList.add('sci-accordion-active');
            me._toggle.classList.add('sci-accordion-active');
        };

        if (!this.animate) {
            show();
            me._content.style.maxHeight = 'initial';
            return;
        }

        // if the accordion is set to animate, the max-height needs to be set temporarily,
        // and reset to initial max-height after the transition is complete

        const maxHeightReset = function () {
            me._content.style.maxHeight = 'initial';
        };

        this._content.addEventListener('transitioncancel', maxHeightReset, { once: true });
        this._content.addEventListener('transitionend', maxHeightReset, { once: true });

        show();
        this._content.style.maxHeight = this._content.scrollHeight + 'px';
    };

    return Accordion;
}());
