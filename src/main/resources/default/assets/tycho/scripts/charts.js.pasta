const SIRIUS_CHART_COLOR_WHEEL = [
    "#5cbae6",
    "#fac364",
    "#b6d957",
    "#d998cb",
    "#f2d249",
    "#98aafb"
];
const SIRIUS_INLINE_CHART_TYPES = [
    'bar', 'line', 'soft-bar', 'area'
];

let siriusChartNextColorWheelIndex = 0;
let siriusChartNextTypeIndex = 0;

/**@
 * Uses the given string to randomize the color wheel and inline chart types.
 *
 * This way, we prevent, that all charts look exactly the same on each page.
 */
function randomizeCharts(randomizer) {
    siriusChartNextColorWheelIndex = 0;
    siriusChartNextTypeIndex = 0;

    for (let i = 0; i < randomizer.length; i++) {
        siriusChartNextColorWheelIndex += 13 * randomizer.charCodeAt(i);
        siriusChartNextTypeIndex += 13 * randomizer.charCodeAt(i);
    }
}

/**@
 * Picks a random color from the list of chart colors.
 */
function pickFromColorWheel() {
    return SIRIUS_CHART_COLOR_WHEEL[siriusChartNextColorWheelIndex++ % SIRIUS_CHART_COLOR_WHEEL.length];
}

/**@
 * Picks random colors from the list of chart colors.
 *
 * @param amount the amount of colors to return
 * @returns {*[]} an array containing randomly picked colors
 */
function multiPickFromColorWheel(amount) {
    let colors = [];
    for (let i = 0; i < amount; i++) {
        colors[i] = pickFromColorWheel();
    }
    return colors;
}

/**@
 * Turns the given type into an inline chart type.
 *
 * Most notably, this will convert 'auto' into a randomly selected chart type.
 */
function makeInlineChartType(type) {
    if (type === 'auto' || sirius.isEmpty(type)) {
        return SIRIUS_INLINE_CHART_TYPES[siriusChartNextTypeIndex++ % SIRIUS_INLINE_CHART_TYPES.length];
    } else {
        return type;
    }
}

/**@
 * Renders an inline chart.
 *
 * @param selector selects the target canvas. Note that also a DOM element is accepted.
 * @param data provides the data to render
 * @param color specifies the color to use. Use null to pick a random color.
 * @param type specifies the chart type to use. Provide 'auto' to select a random type.
 */
function inlineChart(selector, data, color, type) {
    if (sirius.isEmpty(color)) {
        color = pickFromColorWheel();
    }

    type = makeInlineChartType(type);

    if (type === 'bar') {
        _inlineBarChart(selector, data, color, false);
    } else if (type === 'soft-bar') {
        _inlineBarChart(selector, data, color, true);
    } else if (type === 'area') {
        _inlineLineChart(selector, data, color, true);
    } else {
        _inlineLineChart(selector, data, color, false);
    }
}

function _inlineBarChart(selector, data, color, roundedBars) {
    let _canvas = sirius.querySelector(selector);
    new Chart(_canvas, {
        type: 'bar',
        data: {
            labels: data,
            datasets: [{
                label: null,
                data: data,
                backgroundColor: color,
                borderRadius: roundedBars ? 4 : 0
            }]
        },
        options: {
            responsive: false,
            plugins: {
                tooltip: {
                    enabled: false
                },
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    display: false
                },
                y: {
                    display: false
                },
            }
        }
    });
}

function _inlineLineChart(selector, data, color, fill) {
    let _canvas = sirius.querySelector(selector);
    new Chart(_canvas, {
        type: 'line',
        data: {
            labels: data,
            datasets: [{
                label: null,
                data: data,
                borderColor: color,
                pointRadius: 0,
                fill: fill,
                backgroundColor: color
            }]
        },
        options: {
            responsive: false,
            plugins: {
                tooltip: {
                    enabled: false
                },
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    display: false
                },
                y: {
                    display: false
                },
            }
        }
    });
}

/**@
 * Renders a line chart.
 *
 * @param selector the selector to determine the target canvas. Also, the canvas can be passed in as DOM element
 * @param labels an array of labels to use for the chart
 * @param datasets contains an array of datasets, where a dataset is an object containing a "label" and a "data" array
 * which contains the actual numbers.
 */
function lineChart(selector, labels, datasets) {
    _lineChart(selector, labels, datasets, false);
}

/**@
 * Renders an area chart.
 *
 * @param selector the selector to determine the target canvas. Also, the canvas can be passed in as DOM element
 * @param labels an array of labels to use for the chart
 * @param datasets contains an array of datasets, where a dataset is an object containing a "label" and a "data" array
 * which contains the actual numbers.
 */
function areaChart(selector, labels, datasets) {
    _lineChart(selector, labels, datasets, true);
}

function _lineChart(selector, labels, datasets, stacked) {
    const _canvas = sirius.querySelector(selector);
    const lineData = [];
    let hasNonZeroValues = false;
    let hasRightYAxis = false;

    for (let i = 0; i < datasets.length; i++) {
        const color = datasets[i].color ? datasets[i].color : pickFromColorWheel();
        const line = {
            label: datasets[i].label,
            data: datasets[i].data,
            borderColor: color,
            pointRadius: 5,
            fill: stacked ? 'stack' : 'origin',
            backgroundColor: hexToRGB(color, stacked ? 0.4 : 0.1)
        };

        if (datasets[i].axis === 'right') {
            hasRightYAxis = true;
            line.yAxisID = 'yRight';
        }

        if (!hasNonZeroValues) {
            hasNonZeroValues = (line.data.filter(function (value) {
                return value !== 0;
            }).length > 0);
        }

        lineData.push(line);
    }

    const customConfig = {
        responsive: true,
        maintainAspectRatio: false,
        bezierCurve: true,
        plugins: {
            legend: {display: datasets.length > 1},
            tooltip: {
                mode: "x",
                position: "nearest"
            }
        },
        scales: {
            y: {
                min: 0,
                stacked: stacked,
            },
            x: {
                ticks: {
                    autoSkip: false
                }
            }
        }
    };

    if (stacked) {
        customConfig.interaction = {
            mode: 'nearest',
            axis: 'x',
            intersect: false
        }
        customConfig.plugins.tooltip.callbacks = {
            footer: function (tooltipItems) {
                return '___i18n("Charts.total"): ' + tooltipItems.reduce(function (acc, item) {
                    return acc + item.parsed.y;
                }, 0);
            }
        }
    }

    if (hasRightYAxis) {
        customConfig.scales = {
            y: {
                type: 'linear',
                position: 'left',
                min: 0,
                stacked: stacked,
            },
            yRight: {
                type: 'linear',
                position: 'right',
                min: 0,
                stacked: stacked,
                border: {
                    dash: [5, 5]
                }
            }
        };
    }

    if (!hasNonZeroValues) {
        customConfig.scales.y.suggestedMax = 100;
    }

    new Chart(_canvas, {
        type: 'line',
        data: {
            labels: labels,
            datasets: lineData
        },
        options: customConfig
    });
}

function hexToRGB(hex, alpha) {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);

    if (alpha) {
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    } else {
        return "rgb(" + r + ", " + g + ", " + b + ")";
    }
}

/**@
 * Renders a bar chart.
 * @param selector the selector to determine the target canvas. Also, the canvas can be passed in as DOM element
 * @param labels an array of labels to use for the chart
 * @param datasets contains an array of datasets, where a dataset is an object containing a "label" and a "data" array
 * which contains the actual numbers.
 */
function barChart(selector, labels, datasets) {
    const _canvas = sirius.querySelector(selector);
    const barData = [];
    let hasNonZeroValues = false;
    let hasRightYAxis = false;

    for (let i = 0; i < datasets.length; i++) {
        const color = datasets[i].color ? datasets[i].color : pickFromColorWheel();
        const bar = {
            label: datasets[i].label,
            data: datasets[i].data,
            borderColor: color,
            backgroundColor: hexToRGB(color, 0.6)
        };

        if (datasets[i].axis === 'right') {
            hasRightYAxis = true;
            bar.yAxisID = 'yRight';
        }

        if (!hasNonZeroValues) {
            hasNonZeroValues = (bar.data.filter(function (value) {
                return value !== 0;
            }).length > 0);
        }

        barData.push(bar);
    }

    const customConfig = {
        responsive: true,
        maintainAspectRatio: false,
        bezierCurve: true,
        plugins: {
            legend: {display: datasets.length > 1}
        },
        scales: {
            y: {
                min: 0,
            },
            x: {
                ticks: {
                    autoSkip: false
                }
            }
        }
    };

    if (hasRightYAxis) {
        customConfig.scales = {
            y: {
                type: 'linear',
                position: 'left',
                min: 0
            },
            yRight: {
                type: 'linear',
                position: 'right',
                min: 0,
                border: {
                    dash: [5, 5]
                }
            }
        };
    }

    if (!hasNonZeroValues) {
        customConfig.scales.y.suggestedMax = 100;
    }

    new Chart(_canvas, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: barData
        },
        options: customConfig
    });
}

/**@
 * Renders a doughnut chart.
 * @param selector the selector to determine the target canvas. Also, the canvas can be passed in as DOM element
 * @param labels an array of labels to use for the chart
 * @param data array of numeric values to use for the chart
 */
function dougnutChart(selector, labels, data) {
    const _canvas = sirius.querySelector(selector);

    new Chart(_canvas, {
        data: {
            datasets: [{
                data: data,
                backgroundColor: multiPickFromColorWheel(data.length)
            }],
            labels: labels
        },
        type: 'doughnut',
        options: {
            startAngle: -0.55 * Math.PI,
            maintainAspectRatio: false
        }
    });
}
