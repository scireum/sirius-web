sirius.ready(function () {
    document.querySelectorAll('.single-click-link-js').forEach(function (_node) {
        if (sirius.findParentOfType(_node, 'FORM') != null) {
            _node.addEventListener('click', function (event) {
                if (_node.classList.contains('single-click-pending-js')) {
                    event.preventDefault();
                    event.stopPropagation();
                    event.cancelBubble = true;
                    return true;
                }
                _node.classList.add('single-click-pending-js');
            }, true);
        }
    });

    document.querySelectorAll('.submit-link-js').forEach(function (_node) {
        let _form = sirius.findParentOfType(_node, 'FORM');
        _node.addEventListener('click', function () {
            sirius.requestSubmitForm(_form);
        });
        _node.addEventListener('keydown', function (event) {
            if (event.key === sirius.key.ENTER) {
                sirius.requestSubmitForm(_form);
            }
        });
    });

    const _modalElement = document.getElementById('link-confirm-modal-js');
    const _confirmForm = _modalElement.querySelector(".confirm-form-js");
    const _submitBtn = _modalElement.querySelector("button[type='submit']");
    _submitBtn.addEventListener('click', () => {
        sirius.requestSubmitForm(_confirmForm);
    });

    const modal = new bootstrap.Modal(_modalElement, {
        keyboard: true,
    });

    document.querySelectorAll('.confirm-link-js').forEach(_node => {
        _node.addEventListener('click', event => {
            try {
                _confirmForm.setAttribute('action', _node.getAttribute('href'));

                if (_node.dataset.sciSubmitFormId) {
                    [..._confirmForm.children].forEach(_child => _child.name !== "CSRFToken" && _confirmForm.removeChild(_child));
                    const _form = document.getElementById(_node.dataset.sciSubmitFormId);
                    if (_form.children != null) {
                        const _userIdInputs = _form.querySelectorAll('input[name]:not([name="CSRFToken"])');
                        _userIdInputs.forEach(_input => _confirmForm.appendChild(_input));
                    }
                }

                _modalElement.tabIndex = -1;
                _modalElement.addEventListener('shown.bs.modal', () => {
                    const _cancelButton = _modalElement.querySelector('.btn-cancel-js');
                    if (_cancelButton != null) {
                        _cancelButton.focus();
                    }
                }, {
                    once: true,
                });

                modal.show(null);
            } catch (exception) {
                console.log(exception);
            }

            event.preventDefault();
            return false;
        });
    });

    document.querySelectorAll('.copy-input-value-js').forEach(_node => {
        _node.addEventListener('click', () => {
            const fieldName = _node.dataset.tyFieldName;
            const _input = document.querySelector('input[name="' + fieldName + '"]');
            if (_input == null || _input.tagName !== 'INPUT') {
                return;
            }
            sirius.copyToClipboard(_input.value);

            const originalTooltipTitle = _node.dataset.bsOriginalTitle;
            _node.dataset.bsOriginalTitle = _node.dataset.tyCopiedTitle;
            _node.tooltip.show();
            // Reset the tooltip, so it shows the initial title the next time the button is hovered
            _node.dataset.bsOriginalTitle = originalTooltipTitle;
        });

    });
});

/**@
 * Extracts the values of all form elements inside a form.
 * <p>
 * This attempts to replace jQuery's serialize() / serializeArray() method.
 *
 * @param _node the DOM-node of the <form> to get the values from
 * @returns a map of name-value pairs, mapping the name of the input to its value
 */
function getFormData(_node) {
    const object = {};
    var entries = new FormData(_node).entries();
    var entry = entries.next();
    while (!entry.done) {
        object[entry.value[0]] = entry.value[1];
        entry = entries.next();
    }
    return object;
}
